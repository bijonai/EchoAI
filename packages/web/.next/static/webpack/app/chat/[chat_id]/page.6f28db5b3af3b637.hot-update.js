"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/[chat_id]/page",{

/***/ "(app-pages-browser)/./components/board.tsx":
/*!******************************!*\
  !*** ./components/board.tsx ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Board: () => (/* binding */ Board)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.2_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var shikiji__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shikiji */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/bundle-full.mjs\");\n\n\nasync function Board(param) {\n    let { content } = param;\n    const highlighter = await (0,shikiji__WEBPACK_IMPORTED_MODULE_1__.getHighlighter)();\n    highlighter.loadLanguage('markdown');\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"size-full flex\",\n            dangerouslySetInnerHTML: {\n                __html: highlighter.codeToHtml(content, {\n                    lang: 'markdown',\n                    theme: 'github-dark'\n                })\n            }\n        }, void 0, false, {\n            fileName: \"/Users/acboxliu/projects/bijon/echoai/components/board.tsx\",\n            lineNumber: 9,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/board.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvYm9hcmQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0M7QUFFakMsZUFBZUMsTUFBTSxLQUFnQztRQUFoQyxFQUFFQyxPQUFPLEVBQXVCLEdBQWhDO0lBQzFCLE1BQU1DLGNBQWMsTUFBTUgsdURBQWNBO0lBQ3hDRyxZQUFZQyxZQUFZLENBQUM7SUFFekIscUJBQ0UsOERBQUNDO2tCQUNDLDRFQUFDQTtZQUFJQyxXQUFVO1lBQWlCQyx5QkFBeUI7Z0JBQUVDLFFBQVFMLFlBQVlNLFVBQVUsQ0FBQ1AsU0FBUztvQkFBRVEsTUFBTTtvQkFBWUMsT0FBTztnQkFBYztZQUFHOzs7Ozs7Ozs7OztBQUdySjtLQVRzQlYiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hY2JveGxpdS9wcm9qZWN0cy9iaWpvbi9lY2hvYWkvY29tcG9uZW50cy9ib2FyZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0SGlnaGxpZ2h0ZXIgfSBmcm9tIFwic2hpa2lqaVwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBCb2FyZCh7IGNvbnRlbnQgfTogeyBjb250ZW50OiBzdHJpbmcgfSkge1xuICBjb25zdCBoaWdobGlnaHRlciA9IGF3YWl0IGdldEhpZ2hsaWdodGVyKClcbiAgaGlnaGxpZ2h0ZXIubG9hZExhbmd1YWdlKCdtYXJrZG93bicpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaXplLWZ1bGwgZmxleFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaGlnaGxpZ2h0ZXIuY29kZVRvSHRtbChjb250ZW50LCB7IGxhbmc6ICdtYXJrZG93bicsIHRoZW1lOiAnZ2l0aHViLWRhcmsnIH0pIH19PjwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59Il0sIm5hbWVzIjpbImdldEhpZ2hsaWdodGVyIiwiQm9hcmQiLCJjb250ZW50IiwiaGlnaGxpZ2h0ZXIiLCJsb2FkTGFuZ3VhZ2UiLCJkaXYiLCJjbGFzc05hbWUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNvZGVUb0h0bWwiLCJsYW5nIiwidGhlbWUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/board.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/chat.tsx":
/*!*****************************!*\
  !*** ./components/chat.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat),\n/* harmony export */   END: () => (/* binding */ END)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.2_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.2_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _message_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message-box */ \"(app-pages-browser)/./components/message-box.tsx\");\n/* harmony import */ var _tool_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tool-box */ \"(app-pages-browser)/./components/tool-box.tsx\");\n/* harmony import */ var _prompt_area__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompt-area */ \"(app-pages-browser)/./components/prompt-area.tsx\");\n/* harmony import */ var _apis_designer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/apis/designer */ \"(app-pages-browser)/./apis/designer.ts\");\n/* harmony import */ var _timeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./timeline */ \"(app-pages-browser)/./components/timeline.tsx\");\n/* harmony import */ var _apis_speaker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/apis/speaker */ \"(app-pages-browser)/./apis/speaker.ts\");\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./board */ \"(app-pages-browser)/./components/board.tsx\");\n/* harmony import */ var _apis_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/apis/layout */ \"(app-pages-browser)/./apis/layout.ts\");\n/* __next_internal_client_entry_do_not_use__ END,Chat auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst END = Symbol('END_FLAG');\nconst convert = (displayedMessages)=>{\n    return displayedMessages.map((msg, index)=>{\n        if (msg.role === 'user') {\n            return {\n                avatar: 'https://picsum.photos/200/300',\n                role: 'user',\n                content: msg.content\n            };\n        } else if (msg.role === 'processor') {\n            return {\n                role: 'tip',\n                content: msg.content\n            };\n        } else {\n            return {\n                role: 'assistant',\n                content: msg.content\n            };\n        }\n    });\n};\nconst findStep = (stepId, branches)=>{\n    for (const branch of branches){\n        for (const step of branch.steps){\n            if (step.step.toString() === stepId.toString()) {\n                return step;\n            }\n        }\n    }\n    return null;\n};\nconst findStepNext = (stepId, branches)=>{\n    for (const [index, branch] of branches.entries()){\n        for (const [stepIndex, step] of branch.steps.entries()){\n            if (step.step.toString() === stepId.toString()) {\n                if (stepIndex < branch.steps.length - 1) {\n                    return branch.steps[stepIndex + 1];\n                } else if (branch.start && branch.end) {\n                    return findStep(branch.end, branches);\n                } else {\n                    return END;\n                }\n            }\n        }\n    }\n    return null;\n};\nfunction Chat(param) {\n    let { chatId, info, status } = param;\n    _s();\n    const [fetchStatus, setFetchStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(status);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const messages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(convert(info.displayed_messages));\n    const [updateTrigger, setUpdateTrigger] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [branches, setBranches] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(info.branches);\n    const currentStep = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const calledRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [nextAvailablity, setNextAvailablity] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [boardContent, setBoardContent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const requestDesigner = async (inputPrompt)=>{\n        console.log('fetchMessages called', {\n            fetchStatus,\n            inputPrompt\n        });\n        try {\n            calledRef.current = true;\n            setFetchStatus('streaming');\n            setIsLoading(true);\n            messages.current.push(...prompt ? [\n                {\n                    avatar: 'https://picsum.photos/200/300',\n                    role: 'user',\n                    content: inputPrompt\n                }\n            ] : [], {\n                role: 'tip',\n                content: 'Designing...',\n                isLoading: true\n            });\n            setUpdateTrigger((v)=>v + 1);\n            const designerResponse = await (0,_apis_designer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n                chat_id: chatId,\n                prompt\n            });\n            setBranches(designerResponse.branches);\n            currentStep.current = designerResponse.branches[designerResponse.branches.length - 1].steps[0].step;\n            messages.current.length = 0;\n            messages.current.push(...convert(designerResponse.displayed_messages));\n            setUpdateTrigger((v)=>v + 1);\n            let content = '';\n            await request(content, designerResponse.branches);\n            setNextAvailablity(true);\n        } catch (error) {\n            console.error('Error in fetchMessages:', error);\n            setFetchStatus('error');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const requestSpeaker = async (content, currentBranches)=>{\n        const step = findStep(currentStep.current, currentBranches);\n        console.log('requestSpeaker', step, currentStep.current, currentBranches);\n        await (0,_apis_speaker__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({\n            chat_id: chatId,\n            stream: true,\n            ...step\n        }, (chunk)=>{\n            setUpdateTrigger((v)=>v + 1);\n            if (content.length > 0) messages.current.pop();\n            content += chunk.content;\n            messages.current.push({\n                role: 'assistant',\n                content\n            });\n            setUpdateTrigger((v)=>v + 1);\n        });\n    };\n    const requestLayout = async (currentBranches)=>{\n        const step = findStep(currentStep.current, currentBranches);\n        const layoutResponse = await (0,_apis_layout__WEBPACK_IMPORTED_MODULE_9__.layout)({\n            chat_id: chatId,\n            prompt,\n            ...step\n        });\n        setBoardContent(layoutResponse.content);\n        setUpdateTrigger((v)=>v + 1);\n    };\n    const request = async (content, currentBranches)=>{\n        await Promise.all([\n            requestSpeaker(content, currentBranches),\n            requestLayout(currentBranches)\n        ]);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Chat.useEffect\": ()=>{\n            console.log('useEffect triggered', {\n                calledRef: calledRef.current\n            });\n            if (calledRef.current) return;\n            requestDesigner(prompt);\n        }\n    }[\"Chat.useEffect\"], [\n        chatId\n    ]);\n    async function handleNext() {\n        setNextAvailablity(false);\n        const nextStep = findStepNext(currentStep.current, branches);\n        if (nextStep === END) {\n        // TODO: END\n        } else {\n            currentStep.current = nextStep === null || nextStep === void 0 ? void 0 : nextStep.step;\n            let content = '';\n            await request(content, branches);\n            setUpdateTrigger((v)=>v + 1);\n        }\n        setNextAvailablity(true);\n    }\n    function handleSend() {\n        console.log('send', prompt);\n        requestDesigner(prompt);\n        setPrompt('');\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex w-full gap-2 h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col h-full w-2/3 gap-y-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-3/4 h-full bg-gray-100 rounded-lg\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_board__WEBPACK_IMPORTED_MODULE_8__.Board, {\n                                content: boardContent\n                            }, void 0, false, {\n                                fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                                lineNumber: 223,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                            lineNumber: 222,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                        lineNumber: 221,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-1/4 h-full bg-gray-100 rounded-lg\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_timeline__WEBPACK_IMPORTED_MODULE_6__.Timeline, {\n                            branches: branches\n                        }, void 0, false, {\n                            fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                            lineNumber: 227,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                        lineNumber: 226,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                lineNumber: 220,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col w-1/3 gap-y-2 bg-gray-100 rounded-lg p-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-1 overflow-y-auto\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"size-full\",\n                            children: messages.current.map((message, index)=>{\n                                var _message_isLoading, _message_avatar;\n                                return message.role === 'tip' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tool_box__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                    content: message.content,\n                                    isLoading: (_message_isLoading = message.isLoading) !== null && _message_isLoading !== void 0 ? _message_isLoading : false\n                                }, index, false, {\n                                    fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                                    lineNumber: 235,\n                                    columnNumber: 17\n                                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_message_box__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                    avatar: (_message_avatar = message.avatar) !== null && _message_avatar !== void 0 ? _message_avatar : 'https://picsum.photos/200/300',\n                                    role: message.role,\n                                    content: message.content\n                                }, index, false, {\n                                    fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                                    lineNumber: 241,\n                                    columnNumber: 17\n                                }, this);\n                            })\n                        }, void 0, false, {\n                            fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                            lineNumber: 232,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                        lineNumber: 231,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"h-[200px] w-full \",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_prompt_area__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                            onNext: handleNext,\n                            onSend: handleSend,\n                            setPrompt: setPrompt,\n                            next: nextAvailablity\n                        }, void 0, false, {\n                            fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                            lineNumber: 252,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                        lineNumber: 251,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n                lineNumber: 230,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/acboxliu/projects/bijon/echoai/components/chat.tsx\",\n        lineNumber: 219,\n        columnNumber: 5\n    }, this);\n}\n_s(Chat, \"flY/eScIHwC33MP1CxVzekuXGVg=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/chat.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/index.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* reexport safe */ _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle),\n/* harmony export */   addClassToHast: () => (/* binding */ addClassToHast),\n/* harmony export */   applyColorReplacements: () => (/* binding */ applyColorReplacements),\n/* harmony export */   codeToHast: () => (/* binding */ codeToHast),\n/* harmony export */   codeToHtml: () => (/* binding */ codeToHtml),\n/* harmony export */   codeToThemedTokens: () => (/* binding */ codeToThemedTokens),\n/* harmony export */   codeToTokensWithThemes: () => (/* binding */ codeToTokensWithThemes),\n/* harmony export */   createSingletonShorthands: () => (/* binding */ createSingletonShorthands),\n/* harmony export */   createdBundledHighlighter: () => (/* binding */ createdBundledHighlighter),\n/* harmony export */   getHighlighterCore: () => (/* binding */ getHighlighterCore),\n/* harmony export */   getShikiInternal: () => (/* binding */ getShikiInternal),\n/* harmony export */   hastToHtml: () => (/* binding */ toHtml),\n/* harmony export */   isNoneTheme: () => (/* binding */ isNoneTheme),\n/* harmony export */   isPlainLang: () => (/* binding */ isPlainLang),\n/* harmony export */   isPlaintext: () => (/* binding */ isPlaintext),\n/* harmony export */   isSpecialLang: () => (/* binding */ isSpecialLang),\n/* harmony export */   isSpecialTheme: () => (/* binding */ isSpecialTheme),\n/* harmony export */   loadWasm: () => (/* binding */ loadWasm),\n/* harmony export */   normalizeTheme: () => (/* binding */ normalizeTheme),\n/* harmony export */   setDefaultWasmLoader: () => (/* binding */ setDefaultWasmLoader),\n/* harmony export */   splitLines: () => (/* binding */ splitLines),\n/* harmony export */   splitToken: () => (/* binding */ splitToken),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   tokenizeAnsiWithTheme: () => (/* binding */ tokenizeAnsiWithTheme),\n/* harmony export */   tokenizeWithTheme: () => (/* binding */ tokenizeWithTheme)\n/* harmony export */ });\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/types.mjs\");\n/* harmony import */ var _textmate_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textmate.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/textmate.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.2_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n\n\nfunction toArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Slipt a string into lines, each line preserves the line ending.\n */\nfunction splitLines(str) {\n    return Array.from(str.matchAll(/^.*$/mg)).map(x => [x[0], x.index]);\n}\n/**\n * Check if the language is plaintext that is ignored by Shikiji.\n *\n * Hard-coded plain text languages: `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isPlainLang(lang) {\n    return !lang || ['plaintext', 'txt', 'text', 'plain'].includes(lang);\n}\n/**\n * Check if the language is specially handled or bypassed by Shikiji.\n *\n * Hard-coded languages: `ansi` and plaintexts like `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isSpecialLang(lang) {\n    return lang === 'ansi' || isPlainLang(lang);\n}\n/**\n * Check if the theme is specially handled or bypassed by Shikiji.\n *\n * Hard-coded themes: `none`.\n */\nfunction isNoneTheme(theme) {\n    return theme === 'none';\n}\n/**\n * Check if the theme is specially handled or bypassed by Shikiji.\n *\n * Hard-coded themes: `none`.\n */\nfunction isSpecialTheme(theme) {\n    return isNoneTheme(theme);\n}\n/**\n * Utility to append class to a hast node\n *\n * If the `property.class` is a string, it will be splitted by space and converted to an array.\n */\nfunction addClassToHast(node, className) {\n    if (!className)\n        return;\n    node.properties ||= {};\n    node.properties.class ||= [];\n    if (typeof node.properties.class === 'string')\n        node.properties.class = node.properties.class.split(/\\s+/g);\n    if (!Array.isArray(node.properties.class))\n        node.properties.class = [];\n    const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n    for (const c of targets) {\n        if (c && !node.properties.class.includes(c))\n            node.properties.class.push(c);\n    }\n}\n/**\n * Split a token into multiple tokens by given offsets.\n *\n * The offsets are relative to the token, and should be sorted.\n */\nfunction splitToken(token, offsets) {\n    let lastOffset = 0;\n    const tokens = [];\n    for (const offset of offsets) {\n        if (offset > lastOffset) {\n            tokens.push({\n                ...token,\n                content: token.content.slice(lastOffset, offset),\n                offset: token.offset + lastOffset,\n            });\n        }\n        lastOffset = offset;\n    }\n    if (lastOffset < token.content.length) {\n        tokens.push({\n            ...token,\n            content: token.content.slice(lastOffset),\n            offset: token.offset + lastOffset,\n        });\n    }\n    return tokens;\n}\nfunction applyColorReplacements(color, replacements) {\n    return replacements?.[color.toLowerCase()] || color;\n}\n/**\n * @deprecated Use `isPlainLang` instead.\n */\nconst isPlaintext = isPlainLang;\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B[\", position);\n  if (nextEscape !== -1) {\n    const nextClose = value.indexOf(\"m\", nextEscape);\n    return {\n      sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n      startPosition: nextEscape,\n      position: nextClose + 1\n    };\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence, index) {\n  let offset = 1;\n  const colorMode = sequence[index + offset++];\n  let color;\n  if (colorMode === \"2\") {\n    const rgb = [\n      sequence[index + offset++],\n      sequence[index + offset++],\n      sequence[index + offset]\n    ].map((x) => Number.parseInt(x));\n    if (rgb.length === 3 && !rgb.some((x) => Number.isNaN(x))) {\n      color = {\n        type: \"rgb\",\n        rgb\n      };\n    }\n  } else if (colorMode === \"5\") {\n    const colorIndex = Number.parseInt(sequence[index + offset]);\n    if (!Number.isNaN(colorIndex)) {\n      color = { type: \"table\", index: Number(colorIndex) };\n    }\n  }\n  return [offset, color];\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n    const colorReplacements = {\n        ...theme.colorReplacements,\n        ...options?.colorReplacements,\n    };\n    const lines = splitLines(fileContents);\n    const colorPalette = createColorPalette(Object.fromEntries(namedColors.map(name => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`],\n    ])));\n    const parser = createAnsiSequenceParser();\n    return lines.map(line => parser.parse(line[0]).map((token) => {\n        let color;\n        if (token.decorations.has('reverse'))\n            color = token.background ? colorPalette.value(token.background) : theme.bg;\n        else\n            color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        color = applyColorReplacements(color, colorReplacements);\n        if (token.decorations.has('dim'))\n            color = dimColor(color);\n        let fontStyle = _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.None;\n        if (token.decorations.has('bold'))\n            fontStyle |= _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold;\n        if (token.decorations.has('italic'))\n            fontStyle |= _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic;\n        if (token.decorations.has('underline'))\n            fontStyle |= _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline;\n        return {\n            content: token.value,\n            offset: line[1], // TODO: more accurate offset? might need to fork ansi-sequence-parser\n            color,\n            fontStyle,\n        };\n    }));\n}\n/**\n * Adds 50% alpha to a hex color string or the \"-dim\" postfix to a CSS variable\n */\nfunction dimColor(color) {\n    const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n    if (hexMatch) {\n        if (hexMatch[3]) {\n            // convert from #rrggbbaa to #rrggbb(aa/2)\n            const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2)\n                .toString(16)\n                .padStart(2, '0');\n            return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n        }\n        else if (hexMatch[2]) {\n            // convert from #rrggbb to #rrggbb80\n            return `#${hexMatch[1]}${hexMatch[2]}80`;\n        }\n        else {\n            // convert from #rgb to #rrggbb80\n            return `#${Array.from(hexMatch[1])\n                .map(x => `${x}${x}`)\n                .join('')}80`;\n        }\n    }\n    const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n    if (cssVarMatch)\n        return `var(${cssVarMatch[1]}-dim)`;\n    return color;\n}\n\nfunction codeToThemedTokens(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        return splitLines(code).map(line => [{ content: line[0], offset: line[1] }]);\n    const { theme, colorMap } = internal.setTheme(themeName);\n    if (lang === 'ansi')\n        return tokenizeAnsiWithTheme(theme, code, options);\n    const _grammar = internal.getLangGrammar(lang);\n    return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    const colorReplacements = {\n        ...theme.colorReplacements,\n        ...options?.colorReplacements,\n    };\n    const lines = splitLines(code);\n    let ruleStack = _textmate_mjs__WEBPACK_IMPORTED_MODULE_1__.INITIAL;\n    let actual = [];\n    const final = [];\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const [line, lineOffset] = lines[i];\n        if (line === '') {\n            actual = [];\n            final.push([]);\n            continue;\n        }\n        let resultWithScopes;\n        let tokensWithScopes;\n        let tokensWithScopesIndex;\n        if (options.includeExplanation) {\n            resultWithScopes = grammar.tokenizeLine(line, ruleStack);\n            tokensWithScopes = resultWithScopes.tokens;\n            tokensWithScopesIndex = 0;\n        }\n        const result = grammar.tokenizeLine2(line, ruleStack);\n        const tokensLength = result.tokens.length / 2;\n        for (let j = 0; j < tokensLength; j++) {\n            const startIndex = result.tokens[2 * j];\n            const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n            if (startIndex === nextStartIndex)\n                continue;\n            const metadata = result.tokens[2 * j + 1];\n            const foreground = _textmate_mjs__WEBPACK_IMPORTED_MODULE_1__.StackElementMetadata.getForeground(metadata);\n            const foregroundColor = applyColorReplacements(colorMap[foreground], colorReplacements);\n            const fontStyle = _textmate_mjs__WEBPACK_IMPORTED_MODULE_1__.StackElementMetadata.getFontStyle(metadata);\n            const token = {\n                content: line.substring(startIndex, nextStartIndex),\n                offset: lineOffset + startIndex,\n                color: foregroundColor,\n                fontStyle,\n            };\n            if (options.includeExplanation) {\n                token.explanation = [];\n                let offset = 0;\n                while (startIndex + offset < nextStartIndex) {\n                    const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n                    const tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\n                    offset += tokenWithScopesText.length;\n                    token.explanation.push({\n                        content: tokenWithScopesText,\n                        scopes: explainThemeScopes(theme, tokenWithScopes.scopes),\n                    });\n                    tokensWithScopesIndex += 1;\n                }\n            }\n            actual.push(token);\n        }\n        final.push(actual);\n        actual = [];\n        ruleStack = result.ruleStack;\n    }\n    return final;\n}\nfunction explainThemeScopes(theme, scopes) {\n    const result = [];\n    for (let i = 0, len = scopes.length; i < len; i++) {\n        const parentScopes = scopes.slice(0, i);\n        const scope = scopes[i];\n        result[i] = {\n            scopeName: scope,\n            themeMatches: explainThemeScope(theme, scope, parentScopes),\n        };\n    }\n    return result;\n}\nfunction matchesOne(selector, scope) {\n    const selectorPrefix = `${selector}.`;\n    if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix)\n        return true;\n    return false;\n}\nfunction matches(selector, selectorParentScopes, scope, parentScopes) {\n    if (!matchesOne(selector, scope))\n        return false;\n    let selectorParentIndex = selectorParentScopes.length - 1;\n    let parentIndex = parentScopes.length - 1;\n    while (selectorParentIndex >= 0 && parentIndex >= 0) {\n        if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex]))\n            selectorParentIndex -= 1;\n        parentIndex -= 1;\n    }\n    if (selectorParentIndex === -1)\n        return true;\n    return false;\n}\nfunction explainThemeScope(theme, scope, parentScopes) {\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = theme.settings.length; i < len; i++) {\n        const setting = theme.settings[i];\n        let selectors;\n        if (typeof setting.scope === 'string')\n            selectors = setting.scope.split(/,/).map(scope => scope.trim());\n        else if (Array.isArray(setting.scope))\n            selectors = setting.scope;\n        else\n            continue;\n        for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {\n            const rawSelector = selectors[j];\n            const rawSelectorPieces = rawSelector.split(/ /);\n            const selector = rawSelectorPieces[rawSelectorPieces.length - 1];\n            const selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);\n            if (matches(selector, selectorParentScopes, scope, parentScopes)) {\n                // match!\n                result[resultLen++] = setting;\n                // break the loop\n                j = lenJ;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Get tokens with multiple themes\n */\nfunction codeToTokensWithThemes(internal, code, options) {\n    const themes = Object.entries(options.themes)\n        .filter(i => i[1])\n        .map(i => ({ color: i[0], theme: i[1] }));\n    const tokens = syncThemesTokenization(...themes.map(t => codeToThemedTokens(internal, code, {\n        ...options,\n        theme: t.theme,\n        includeExplanation: false,\n    })));\n    const mergedTokens = tokens[0]\n        .map((line, lineIdx) => line\n        .map((_token, tokenIdx) => {\n        const mergedToken = {\n            content: _token.content,\n            variants: {},\n            offset: _token.offset,\n        };\n        tokens.forEach((t, themeIdx) => {\n            const { content: _, explanation: __, offset: ___, ...styles } = t[lineIdx][tokenIdx];\n            mergedToken.variants[themes[themeIdx].color] = styles;\n        });\n        return mergedToken;\n    }));\n    return mergedTokens;\n}\n/**\n * Break tokens from multiple themes into same tokenization.\n *\n * For example, given two themes that tokenize `console.log(\"hello\")` as:\n *\n * - `console . log (\" hello \")` (6 tokens)\n * - `console .log ( \"hello\" )` (5 tokens)\n *\n * This function will return:\n *\n * - `console . log ( \" hello \" )` (8 tokens)\n * - `console . log ( \" hello \" )` (8 tokens)\n */\nfunction syncThemesTokenization(...themes) {\n    const outThemes = themes.map(() => []);\n    const count = themes.length;\n    for (let i = 0; i < themes[0].length; i++) {\n        const lines = themes.map(t => t[i]);\n        const outLines = outThemes.map(() => []);\n        outThemes.forEach((t, i) => t.push(outLines[i]));\n        const indexes = lines.map(() => 0);\n        const current = lines.map(l => l[0]);\n        while (current.every(t => t)) {\n            const minLength = Math.min(...current.map(t => t.content.length));\n            for (let n = 0; n < count; n++) {\n                const token = current[n];\n                if (token.content.length === minLength) {\n                    outLines[n].push(token);\n                    indexes[n] += 1;\n                    current[n] = lines[n][indexes[n]];\n                }\n                else {\n                    outLines[n].push({\n                        ...token,\n                        content: token.content.slice(0, minLength),\n                    });\n                    current[n] = {\n                        ...token,\n                        content: token.content.slice(minLength),\n                        offset: token.offset + minLength,\n                    };\n                }\n            }\n        }\n    }\n    return outThemes;\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n}) {\n    let input = code;\n    for (const transformer of options.transformers || [])\n        input = transformer.preprocess?.call(transformerContext, input, options) || input;\n    let bg;\n    let fg;\n    let tokens;\n    let themeName;\n    let rootStyle;\n    if ('themes' in options) {\n        const { defaultColor = 'light', cssVariablePrefix = '--shiki-', } = options;\n        const themes = Object.entries(options.themes)\n            .filter(i => i[1])\n            .map(i => ({ color: i[0], theme: i[1] }))\n            .sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n        if (themes.length === 0)\n            throw new Error('[shikiji] `themes` option must not be empty');\n        const themeTokens = codeToTokensWithThemes(internal, input, options);\n        if (defaultColor && !themes.find(t => t.color === defaultColor))\n            throw new Error(`[shikiji] \\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n        const themeRegs = themes.map(t => internal.getTheme(t.theme));\n        const themesOrder = themes.map(t => t.color);\n        tokens = themeTokens\n            .map(line => line.map(token => mergeToken(token, themesOrder, cssVariablePrefix, defaultColor)));\n        fg = themes.map((t, idx) => (idx === 0 && defaultColor ? '' : `${cssVariablePrefix + t.color}:`) + (themeRegs[idx].fg || 'inherit')).join(';');\n        bg = themes.map((t, idx) => (idx === 0 && defaultColor ? '' : `${cssVariablePrefix + t.color}-bg:`) + (themeRegs[idx].bg || 'inherit')).join(';');\n        themeName = `shiki-themes ${themeRegs.map(t => t.name).join(' ')}`;\n        rootStyle = defaultColor ? undefined : [fg, bg].join(';');\n    }\n    else if ('theme' in options) {\n        tokens = codeToThemedTokens(internal, input, {\n            ...options,\n            includeExplanation: false,\n        });\n        const _theme = internal.getTheme(options.theme);\n        bg = _theme.bg;\n        fg = _theme.fg;\n        themeName = _theme.name;\n    }\n    else {\n        throw new Error('[shikiji] Invalid options, either `theme` or `themes` must be provided');\n    }\n    const { mergeWhitespaces = true, } = options;\n    if (mergeWhitespaces === true)\n        tokens = mergeWhitespaceTokens(tokens);\n    else if (mergeWhitespaces === 'never')\n        tokens = splitWhitespaceTokens(tokens);\n    for (const transformer of options.transformers || [])\n        tokens = transformer.tokens?.call(transformerContext, tokens) || tokens;\n    return tokensToHast(tokens, {\n        ...options,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    }, transformerContext);\n}\nfunction mergeToken(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n    const token = {\n        content: merged.content,\n        explanation: merged.explanation,\n        offset: merged.offset,\n    };\n    const styles = variantsOrder.map(t => getTokenStyleObject(merged.variants[t]));\n    // Get all style keys, for themes that missing some style, we put `inherit` to override as needed\n    const styleKeys = new Set(styles.flatMap(t => Object.keys(t)));\n    const mergedStyles = styles.reduce((acc, cur, idx) => {\n        for (const key of styleKeys) {\n            const value = cur[key] || 'inherit';\n            if (idx === 0 && defaultColor) {\n                acc[key] = value;\n            }\n            else {\n                const varKey = cssVariablePrefix + variantsOrder[idx] + (key === 'color' ? '' : `-${key}`);\n                if (acc[key])\n                    acc[key] += `;${varKey}:${value}`;\n                else\n                    acc[key] = `${varKey}:${value}`;\n            }\n        }\n        return acc;\n    }, {});\n    token.htmlStyle = defaultColor\n        ? stringifyTokenStyle(mergedStyles)\n        : Object.values(mergedStyles).join(';');\n    return token;\n}\nfunction tokensToHast(tokens, options, transformerContext) {\n    const { transformers = [], } = options;\n    const lines = [];\n    const tree = {\n        type: 'root',\n        children: [],\n    };\n    let preNode = {\n        type: 'element',\n        tagName: 'pre',\n        properties: {\n            class: `shiki ${options.themeName || ''}`,\n            style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n            tabindex: '0',\n            ...Object.fromEntries(Array.from(Object.entries(options.meta || {}))\n                .filter(([key]) => !key.startsWith('_'))),\n        },\n        children: [],\n    };\n    let codeNode = {\n        type: 'element',\n        tagName: 'code',\n        properties: {},\n        children: lines,\n    };\n    const lineNodes = [];\n    const context = {\n        ...transformerContext,\n        get tokens() {\n            return tokens;\n        },\n        get options() {\n            return options;\n        },\n        get root() {\n            return tree;\n        },\n        get pre() {\n            return preNode;\n        },\n        get code() {\n            return codeNode;\n        },\n        get lines() {\n            return lineNodes;\n        },\n    };\n    tokens.forEach((line, idx) => {\n        if (idx)\n            lines.push({ type: 'text', value: '\\n' });\n        let lineNode = {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'line' },\n            children: [],\n        };\n        let col = 0;\n        for (const token of line) {\n            let tokenNode = {\n                type: 'element',\n                tagName: 'span',\n                properties: {},\n                children: [{ type: 'text', value: token.content }],\n            };\n            const style = token.htmlStyle || stringifyTokenStyle(getTokenStyleObject(token));\n            if (style)\n                tokenNode.properties.style = style;\n            for (const transformer of transformers)\n                tokenNode = (transformer?.span || transformer?.token)?.call(context, tokenNode, idx + 1, col, lineNode) || tokenNode;\n            lineNode.children.push(tokenNode);\n            col += token.content.length;\n        }\n        for (const transformer of transformers)\n            lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n        lineNodes.push(lineNode);\n        lines.push(lineNode);\n    });\n    for (const transformer of transformers)\n        codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n    preNode.children.push(codeNode);\n    for (const transformer of transformers)\n        preNode = transformer?.pre?.call(context, preNode) || preNode;\n    tree.children.push(preNode);\n    let result = tree;\n    for (const transformer of transformers)\n        result = transformer?.root?.call(context, result) || result;\n    return result;\n}\nfunction getTokenStyleObject(token) {\n    const styles = {};\n    if (token.color)\n        styles.color = token.color;\n    if (token.fontStyle) {\n        if (token.fontStyle & _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Italic)\n            styles['font-style'] = 'italic';\n        if (token.fontStyle & _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Bold)\n            styles['font-weight'] = 'bold';\n        if (token.fontStyle & _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline)\n            styles['text-decoration'] = 'underline';\n    }\n    return styles;\n}\nfunction stringifyTokenStyle(token) {\n    return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(';');\n}\nfunction mergeWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        const newLine = [];\n        let carryOnContent = '';\n        let firstOffset = 0;\n        line.forEach((token, idx) => {\n            const isUnderline = token.fontStyle && token.fontStyle & _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.Underline;\n            const couldMerge = !isUnderline;\n            if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n                if (!firstOffset)\n                    firstOffset = token.offset;\n                carryOnContent += token.content;\n            }\n            else {\n                if (carryOnContent) {\n                    if (couldMerge) {\n                        newLine.push({\n                            ...token,\n                            content: carryOnContent + token.content,\n                        });\n                    }\n                    else {\n                        newLine.push({\n                            content: carryOnContent,\n                            offset: firstOffset,\n                        }, token);\n                    }\n                    carryOnContent = '';\n                }\n                else {\n                    newLine.push(token);\n                }\n            }\n        });\n        return newLine;\n    });\n}\nfunction splitWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            if (token.content.match(/^\\s+$/))\n                return token;\n            const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n            if (!match)\n                return token;\n            const [, leading, content, trailing] = match;\n            if (!leading && !trailing)\n                return token;\n            const expanded = [{\n                    ...token,\n                    offset: token.offset + leading.length,\n                    content,\n                }];\n            if (leading) {\n                expanded.unshift({\n                    content: leading,\n                    offset: token.offset,\n                });\n            }\n            if (trailing) {\n                expanded.push({\n                    content: trailing,\n                    offset: token.offset + leading.length + content.length,\n                });\n            }\n            return expanded;\n        });\n    });\n}\n\n/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nconst htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n];\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nclass Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new Schema(property, normal, space)\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize(value) {\n  return value.toLowerCase()\n}\n\nclass Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;\n\nlet powers = 0;\n\nconst boolean = increment();\nconst booleanish = increment();\nconst overloadedBoolean = increment();\nconst number = increment();\nconst spaceSeparated = increment();\nconst commaSeparated = increment();\nconst commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return 2 ** ++powers\n}\n\nvar types = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  boolean: boolean,\n  booleanish: booleanish,\n  commaOrSpaceSeparated: commaOrSpaceSeparated,\n  commaSeparated: commaSeparated,\n  number: number,\n  overloadedBoolean: overloadedBoolean,\n  spaceSeparated: spaceSeparated\n});\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\n\nclass DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n\n    super(property, attribute);\n\n    mark(this, 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\nconst own$3 = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nfunction create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n\n  for (prop in definition.properties) {\n    if (own$3.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      );\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n\nconst xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n\nconst xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n});\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n\nconst xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n});\n\nconst aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n\nconst html$3 = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n\nconst svg$1 = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nfunction find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = DefinedInfo;\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nconst html$2 = merge([xml, xlink, xmlns, aria, html$3], 'html');\nconst svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');\n\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own$2 = {}.hasOwnProperty;\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nfunction zwitch(key, options) {\n  const settings = options || {};\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n\n    if (value && own$2.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one\n}\n\n/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nfunction core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  );\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = [];\n  let index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toDecimal(code, next, omit) {\n  const value = '&#' + String(code);\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nconst characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n];\n\n/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nconst characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n};\n\n/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nconst dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n];\n\nconst own$1 = {}.hasOwnProperty;\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {};\n\n/** @type {string} */\nlet key;\n\nfor (key in characterEntitiesHtml4) {\n  if (own$1.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nfunction toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n\n  if (own$1.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n\n/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nfunction formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n  let named;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    );\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n\n/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n\n/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nfunction ccount(value, character) {\n  const source = String(value);\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0;\n  let index = source.indexOf(character);\n\n  while (index !== -1) {\n    count++;\n    index = source.indexOf(character, index + character.length);\n  }\n\n  return count\n}\n\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nfunction stringify$1(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n\n/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nfunction stringify(values) {\n  return values.join(' ').trim()\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nfunction whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n */\n\n\nconst siblingAfter = siblings(1);\nconst siblingBefore = siblings(-1);\n\n/** @type {Array<RootContent>} */\nconst emptyChildren$1 = [];\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren$1;\n    let offset = (index || 0) + increment;\n    let next = siblings[offset];\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment;\n        next = siblings[offset];\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nfunction omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst closing = omission({\n  body: body$1,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html: html$1,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody: tbody$1,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n});\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true);\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n\nconst opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1);\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children;\n  /** @type {Array<string>} */\n  const seen = [];\n  let index = -1;\n\n  while (++index < children.length) {\n    const child = children[index];\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName);\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true);\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Properties} Properties\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n};\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n\n  const attrs = serializeAttributes(state, node.properties);\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  );\n\n  state.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false;\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1);\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== null && props[key] !== undefined) {\n        const value = serializeAttribute(state, key, props[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key);\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value);\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  );\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? stringify$1 : stringify)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value);\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    );\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative;\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n\n/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction root(node, _1, _2, state) {\n  return state.all(node)\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nconst handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n});\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_);\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('stringify-entities').Options} StringifyEntitiesOptions\n */\n\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {};\n\n/** @type {Array<never>} */\nconst emptyChildren = [];\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nfunction toHtml(tree, options) {\n  const options_ = options || emptyOptions;\n  const quote = options_.quote || '\"';\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html$2,\n    quote,\n    alternative\n  };\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = [];\n  const children = (parent && parent.children) || emptyChildren;\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('')\n}\n\n/**\n * Get highlighted code in HTML.\n */\nfunction codeToHtml(internal, code, options) {\n    const context = {\n        meta: {},\n        options,\n        codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    };\n    let result = toHtml(codeToHast(internal, code, options, context));\n    for (const transformer of options.transformers || [])\n        result = transformer.postprocess?.call(context, result, options) || result;\n    return result;\n}\n\nasync function main(init) {\n    let wasmMemory;\n    let buffer;\n    const binding = {};\n    function updateGlobalBufferAndViews(buf) {\n        buffer = buf;\n        binding.HEAPU8 = new Uint8Array(buf);\n        binding.HEAPU32 = new Uint32Array(buf);\n    }\n    function _emscripten_get_now() {\n        return typeof performance !== 'undefined' ? performance.now() : Date.now();\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n        binding.HEAPU8.copyWithin(dest, src, src + num);\n    }\n    function getHeapMax() {\n        return 2147483648;\n    }\n    function emscripten_realloc_buffer(size) {\n        try {\n            wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n        }\n        catch (e) { }\n    }\n    function _emscripten_resize_heap(requestedSize) {\n        const oldSize = binding.HEAPU8.length;\n        requestedSize = requestedSize >>> 0;\n        const maxHeapSize = getHeapMax();\n        if (requestedSize > maxHeapSize)\n            return false;\n        const alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n        for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            const replacement = emscripten_realloc_buffer(newSize);\n            if (replacement)\n                return true;\n        }\n        return false;\n    }\n    const asmLibraryArg = {\n        emscripten_get_now: _emscripten_get_now,\n        emscripten_memcpy_big: _emscripten_memcpy_big,\n        emscripten_resize_heap: _emscripten_resize_heap,\n        fd_write: () => 0,\n    };\n    async function createWasm() {\n        const info = {\n            env: asmLibraryArg,\n            wasi_snapshot_preview1: asmLibraryArg,\n        };\n        const exports = await init(info);\n        wasmMemory = exports.memory;\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        Object.assign(binding, exports);\n    }\n    await createWasm();\n    return binding;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\nlet onigBinding = null;\nlet defaultDebugCall = false;\nfunction throwLastOnigError(onigBinding) {\n    throw new Error(onigBinding.UTF8ToString(onigBinding.getLastOnigError()));\n}\nclass UtfString {\n    static _utf8ByteLength(str) {\n        let result = 0;\n        for (let i = 0, len = str.length; i < len; i++) {\n            const charCode = str.charCodeAt(i);\n            let codepoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i + 1 < len) {\n                    const nextCharCode = str.charCodeAt(i + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codepoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (codepoint <= 0x7F)\n                result += 1;\n            else if (codepoint <= 0x7FF)\n                result += 2;\n            else if (codepoint <= 0xFFFF)\n                result += 3;\n            else\n                result += 4;\n            if (wasSurrogatePair)\n                i++;\n        }\n        return result;\n    }\n    utf16Length;\n    utf8Length;\n    utf16Value;\n    utf8Value;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    constructor(str) {\n        const utf16Length = str.length;\n        const utf8Length = UtfString._utf8ByteLength(str);\n        const computeIndicesMapping = (utf8Length !== utf16Length);\n        const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n        if (computeIndicesMapping)\n            utf16OffsetToUtf8[utf16Length] = utf8Length;\n        const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n        if (computeIndicesMapping)\n            utf8OffsetToUtf16[utf8Length] = utf16Length;\n        const utf8Value = new Uint8Array(utf8Length);\n        let i8 = 0;\n        for (let i16 = 0; i16 < utf16Length; i16++) {\n            const charCode = str.charCodeAt(i16);\n            let codePoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i16 + 1 < utf16Length) {\n                    const nextCharCode = str.charCodeAt(i16 + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codePoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (computeIndicesMapping) {\n                utf16OffsetToUtf8[i16] = i8;\n                if (wasSurrogatePair)\n                    utf16OffsetToUtf8[i16 + 1] = i8;\n                if (codePoint <= 0x7F) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                }\n                else if (codePoint <= 0x7FF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                }\n                else if (codePoint <= 0xFFFF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                }\n                else {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                    utf8OffsetToUtf16[i8 + 3] = i16;\n                }\n            }\n            if (codePoint <= 0x7F) {\n                utf8Value[i8++] = codePoint;\n            }\n            else if (codePoint <= 0x7FF) {\n                utf8Value[i8++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else if (codePoint <= 0xFFFF) {\n                utf8Value[i8++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else {\n                utf8Value[i8++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            if (wasSurrogatePair)\n                i16++;\n        }\n        this.utf16Length = utf16Length;\n        this.utf8Length = utf8Length;\n        this.utf16Value = str;\n        this.utf8Value = utf8Value;\n        this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n    }\n    createString(onigBinding) {\n        const result = onigBinding.omalloc(this.utf8Length);\n        onigBinding.HEAPU8.set(this.utf8Value, result);\n        return result;\n    }\n}\nclass OnigString {\n    static LAST_ID = 0;\n    static _sharedPtr = 0; // a pointer to a string of 10000 bytes\n    static _sharedPtrInUse = false;\n    id = (++OnigString.LAST_ID);\n    _onigBinding;\n    content;\n    utf16Length;\n    utf8Length;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    ptr;\n    constructor(str) {\n        if (!onigBinding)\n            throw new Error('Must invoke loadWasm first.');\n        this._onigBinding = onigBinding;\n        this.content = str;\n        const utfString = new UtfString(str);\n        this.utf16Length = utfString.utf16Length;\n        this.utf8Length = utfString.utf8Length;\n        this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n        if (this.utf8Length < 10000 && !OnigString._sharedPtrInUse) {\n            if (!OnigString._sharedPtr)\n                OnigString._sharedPtr = onigBinding.omalloc(10000);\n            OnigString._sharedPtrInUse = true;\n            onigBinding.HEAPU8.set(utfString.utf8Value, OnigString._sharedPtr);\n            this.ptr = OnigString._sharedPtr;\n        }\n        else {\n            this.ptr = utfString.createString(onigBinding);\n        }\n    }\n    convertUtf8OffsetToUtf16(utf8Offset) {\n        if (this.utf8OffsetToUtf16) {\n            if (utf8Offset < 0)\n                return 0;\n            if (utf8Offset > this.utf8Length)\n                return this.utf16Length;\n            return this.utf8OffsetToUtf16[utf8Offset];\n        }\n        return utf8Offset;\n    }\n    convertUtf16OffsetToUtf8(utf16Offset) {\n        if (this.utf16OffsetToUtf8) {\n            if (utf16Offset < 0)\n                return 0;\n            if (utf16Offset > this.utf16Length)\n                return this.utf8Length;\n            return this.utf16OffsetToUtf8[utf16Offset];\n        }\n        return utf16Offset;\n    }\n    dispose() {\n        if (this.ptr === OnigString._sharedPtr)\n            OnigString._sharedPtrInUse = false;\n        else\n            this._onigBinding.ofree(this.ptr);\n    }\n}\nclass OnigScanner {\n    _onigBinding;\n    _ptr;\n    constructor(patterns) {\n        if (!onigBinding)\n            throw new Error('Must invoke loadWasm first.');\n        const strPtrsArr = [];\n        const strLenArr = [];\n        for (let i = 0, len = patterns.length; i < len; i++) {\n            const utfString = new UtfString(patterns[i]);\n            strPtrsArr[i] = utfString.createString(onigBinding);\n            strLenArr[i] = utfString.utf8Length;\n        }\n        const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n        const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n        const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n        for (let i = 0, len = patterns.length; i < len; i++)\n            onigBinding.ofree(strPtrsArr[i]);\n        onigBinding.ofree(strLenPtr);\n        onigBinding.ofree(strPtrsPtr);\n        if (scannerPtr === 0)\n            throwLastOnigError(onigBinding);\n        this._onigBinding = onigBinding;\n        this._ptr = scannerPtr;\n    }\n    dispose() {\n        this._onigBinding.freeOnigScanner(this._ptr);\n    }\n    findNextMatchSync(string, startPosition, arg) {\n        let debugCall = defaultDebugCall;\n        let options = 0 /* FindOption.None */;\n        if (typeof arg === 'number') {\n            if (arg & 8 /* FindOption.DebugCall */)\n                debugCall = true;\n            options = arg;\n        }\n        else if (typeof arg === 'boolean') {\n            debugCall = arg;\n        }\n        if (typeof string === 'string') {\n            string = new OnigString(string);\n            const result = this._findNextMatchSync(string, startPosition, debugCall, options);\n            string.dispose();\n            return result;\n        }\n        return this._findNextMatchSync(string, startPosition, debugCall, options);\n    }\n    _findNextMatchSync(string, startPosition, debugCall, options) {\n        const onigBinding = this._onigBinding;\n        let resultPtr;\n        if (debugCall)\n            resultPtr = onigBinding.findNextOnigScannerMatchDbg(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        else\n            resultPtr = onigBinding.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        if (resultPtr === 0) {\n            // no match\n            return null;\n        }\n        const HEAPU32 = onigBinding.HEAPU32;\n        let offset = resultPtr / 4; // byte offset -> uint32 offset\n        const index = HEAPU32[offset++];\n        const count = HEAPU32[offset++];\n        const captureIndices = [];\n        for (let i = 0; i < count; i++) {\n            const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            captureIndices[i] = {\n                start: beg,\n                end,\n                length: end - beg,\n            };\n        }\n        return {\n            index,\n            captureIndices,\n        };\n    }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.instantiator === 'function');\n}\nfunction isInstantiatorModule(dataOrOptions) {\n    return (typeof dataOrOptions.default === 'function');\n}\nfunction isDataOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.data !== 'undefined');\n}\nfunction isResponse(dataOrOptions) {\n    return (typeof Response !== 'undefined' && dataOrOptions instanceof Response);\n}\nfunction isArrayBuffer(data) {\n    return (typeof ArrayBuffer !== 'undefined' && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)))\n        // eslint-disable-next-line node/prefer-global/buffer\n        || (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))\n        || (typeof SharedArrayBuffer !== 'undefined' && data instanceof SharedArrayBuffer)\n        || (typeof Uint32Array !== 'undefined' && data instanceof Uint32Array);\n}\nlet initPromise;\nfunction loadWasm(options) {\n    if (initPromise)\n        return initPromise;\n    async function _load() {\n        onigBinding = await main(async (info) => {\n            let instance = options;\n            instance = await instance;\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (isInstantiatorOptionsObject(instance)) {\n                instance = await instance.instantiator(info);\n            }\n            else if (isInstantiatorModule(instance)) {\n                instance = await instance.default(info);\n            }\n            else {\n                if (isDataOptionsObject(instance))\n                    instance = instance.data;\n                if (isResponse(instance)) {\n                    if (typeof WebAssembly.instantiateStreaming === 'function')\n                        instance = await _makeResponseStreamingLoader(instance)(info);\n                    else\n                        instance = await _makeResponseNonStreamingLoader(instance)(info);\n                }\n                else if (isArrayBuffer(instance)) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n            }\n            if ('instance' in instance)\n                instance = instance.instance;\n            if ('exports' in instance)\n                instance = instance.exports;\n            return instance;\n        });\n    }\n    initPromise = _load();\n    return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n    return importObject => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n    return importObject => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n    return async (importObject) => {\n        const arrayBuffer = await data.arrayBuffer();\n        return WebAssembly.instantiate(arrayBuffer, importObject);\n    };\n}\nfunction createOnigString(str) {\n    return new OnigString(str);\n}\nfunction createOnigScanner(patterns) {\n    return new OnigScanner(patterns);\n}\n\n/**\n * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268\n */\nconst VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };\nconst RESOLVED_KEY = '__shiki_resolved';\n/**\n * Normalize a textmate theme to shiki theme\n */\nfunction normalizeTheme(rawTheme) {\n    // @ts-expect-error private field\n    if (rawTheme?.[RESOLVED_KEY])\n        return rawTheme;\n    const theme = {\n        ...rawTheme,\n    };\n    // Fallback settings\n    if (theme.tokenColors && !theme.settings) {\n        theme.settings = theme.tokenColors;\n        delete theme.tokenColors;\n    }\n    theme.type ||= 'dark';\n    theme.colorReplacements = { ...theme.colorReplacements };\n    theme.settings ||= [];\n    // Guess fg/bg colors\n    let { bg, fg } = theme;\n    if (!bg || !fg) {\n        /**\n         * First try:\n         * Theme might contain a global `tokenColor` without `name` or `scope`\n         * Used as default value for foreground/background\n         */\n        const globalSetting = theme.settings\n            ? theme.settings.find((s) => !s.name && !s.scope)\n            : undefined;\n        if (globalSetting?.settings?.foreground)\n            fg = globalSetting.settings.foreground;\n        if (globalSetting?.settings?.background)\n            bg = globalSetting.settings.background;\n        /**\n         * Second try:\n         * If there's no global `tokenColor` without `name` or `scope`\n         * Use `editor.foreground` and `editor.background`\n         */\n        if (!fg && theme?.colors?.['editor.foreground'])\n            fg = theme.colors['editor.foreground'];\n        if (!bg && theme?.colors?.['editor.background'])\n            bg = theme.colors['editor.background'];\n        /**\n         * Last try:\n         * If there's no fg/bg color specified in theme, use default\n         */\n        if (!fg)\n            fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n        if (!bg)\n            bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n        theme.fg = fg;\n        theme.bg = bg;\n    }\n    // Push a no-scope setting with fallback colors\n    if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n        theme.settings.unshift({\n            settings: {\n                foreground: theme.fg,\n                background: theme.bg,\n            },\n        });\n    }\n    // Push non-hex colors to color replacements, as `vscode-textmate` doesn't support them\n    let replacementCount = 0;\n    const replacementMap = new Map();\n    function getReplacementColor(value) {\n        if (replacementMap.has(value))\n            return replacementMap.get(value);\n        replacementCount += 1;\n        const hex = `#${replacementCount.toString(16).padStart(8, '0').toLowerCase()}`;\n        if (theme.colorReplacements?.[`#${hex}`]) // already exists\n            return getReplacementColor(value);\n        replacementMap.set(value, hex);\n        return hex;\n    }\n    theme.settings = theme.settings.map((setting) => {\n        const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith('#');\n        const replaceBg = setting.settings?.background && !setting.settings.background.startsWith('#');\n        if (!replaceFg && !replaceBg)\n            return setting;\n        const clone = {\n            ...setting,\n            settings: {\n                ...setting.settings,\n            },\n        };\n        if (replaceFg) {\n            const replacement = getReplacementColor(setting.settings.foreground);\n            theme.colorReplacements[replacement] = setting.settings.foreground;\n            clone.settings.foreground = replacement;\n        }\n        if (replaceBg) {\n            const replacement = getReplacementColor(setting.settings.background);\n            theme.colorReplacements[replacement] = setting.settings.background;\n            clone.settings.background = replacement;\n        }\n        return clone;\n    });\n    for (const key of Object.keys(theme.colors || {})) {\n        // Only patch for known keys\n        if (key === 'editor.foreground' || key === 'editor.background' || key.startsWith('terminal.ansi')) {\n            if (!theme.colors[key]?.startsWith('#')) {\n                const replacement = getReplacementColor(theme.colors[key]);\n                theme.colorReplacements[replacement] = theme.colors[key];\n                theme.colors[key] = replacement;\n            }\n        }\n    }\n    Object.defineProperty(theme, RESOLVED_KEY, {\n        enumerable: false,\n        writable: false,\n        value: true,\n    });\n    return theme;\n}\n\nclass Registry extends _textmate_mjs__WEBPACK_IMPORTED_MODULE_1__.Registry {\n    _resolver;\n    _themes;\n    _langs;\n    _resolvedThemes = {};\n    _resolvedGrammars = {};\n    _langMap = {};\n    _langGraph = new Map();\n    alias = {};\n    constructor(_resolver, _themes, _langs) {\n        super(_resolver);\n        this._resolver = _resolver;\n        this._themes = _themes;\n        this._langs = _langs;\n        _themes.forEach(t => this.loadTheme(t));\n        _langs.forEach(l => this.loadLanguage(l));\n    }\n    getTheme(theme) {\n        if (typeof theme === 'string')\n            return this._resolvedThemes[theme];\n        else\n            return this.loadTheme(theme);\n    }\n    loadTheme(theme) {\n        const _theme = normalizeTheme(theme);\n        if (_theme.name)\n            this._resolvedThemes[_theme.name] = _theme;\n        return _theme;\n    }\n    getLoadedThemes() {\n        return Object.keys(this._resolvedThemes);\n    }\n    getGrammar(name) {\n        if (this.alias[name]) {\n            const resolved = new Set([name]);\n            while (this.alias[name]) {\n                name = this.alias[name];\n                if (resolved.has(name))\n                    throw new Error(`[shikiji] Circular alias \\`${Array.from(resolved).join(' -> ')} -> ${name}\\``);\n                resolved.add(name);\n            }\n        }\n        return this._resolvedGrammars[name];\n    }\n    async loadLanguage(lang) {\n        if (this.getGrammar(lang.name))\n            return;\n        const embeddedLazilyBy = new Set(Object.values(this._langMap).filter(i => i.embeddedLangsLazy?.includes(lang.name)));\n        this._resolver.addLanguage(lang);\n        const grammarConfig = {\n            balancedBracketSelectors: lang.balancedBracketSelectors || ['*'],\n            unbalancedBracketSelectors: lang.unbalancedBracketSelectors || [],\n        };\n        // @ts-expect-error Private members, set this to override the previous grammar (that can be a stub)\n        this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n        const g = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n        this._resolvedGrammars[lang.name] = g;\n        if (lang.aliases) {\n            lang.aliases.forEach((alias) => {\n                this.alias[alias] = lang.name;\n            });\n        }\n        // If there is a language that embeds this language lazily, we need to reload it\n        if (embeddedLazilyBy.size) {\n            for (const e of embeddedLazilyBy) {\n                delete this._resolvedGrammars[e.name];\n                // @ts-expect-error clear cache\n                this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n                // @ts-expect-error clear cache\n                this._syncRegistry?._grammars?.delete(e.scopeName);\n                await this.loadLanguage(this._langMap[e.name]);\n            }\n        }\n    }\n    async init() {\n        this._themes.map(t => this.loadTheme(t));\n        await this.loadLanguages(this._langs);\n    }\n    async loadLanguages(langs) {\n        for (const lang of langs)\n            this.resolveEmbeddedLanguages(lang);\n        const langsGraphArray = Array.from(this._langGraph.entries());\n        const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n        if (missingLangs.length) {\n            const dependents = langsGraphArray\n                .filter(([_, lang]) => lang && lang.embeddedLangs?.some(l => missingLangs.map(([name]) => name).includes(l)))\n                .filter(lang => !missingLangs.includes(lang));\n            throw new Error(`[shikiji] Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(', ')}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(', ')}`);\n        }\n        for (const [_, lang] of langsGraphArray)\n            this._resolver.addLanguage(lang);\n        for (const [_, lang] of langsGraphArray)\n            await this.loadLanguage(lang);\n    }\n    getLoadedLanguages() {\n        return Object.keys({ ...this._resolvedGrammars, ...this.alias });\n    }\n    resolveEmbeddedLanguages(lang) {\n        this._langMap[lang.name] = lang;\n        this._langGraph.set(lang.name, lang);\n        if (lang.embeddedLangs) {\n            for (const embeddedLang of lang.embeddedLangs)\n                this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);\n        }\n    }\n}\n\nclass Resolver {\n    _langs = new Map();\n    _scopeToLang = new Map();\n    _injections = new Map();\n    _onigLibPromise;\n    constructor(onigLibPromise, langs) {\n        this._onigLibPromise = onigLibPromise;\n        langs.forEach(i => this.addLanguage(i));\n    }\n    get onigLib() {\n        return this._onigLibPromise;\n    }\n    getLangRegistration(langIdOrAlias) {\n        return this._langs.get(langIdOrAlias);\n    }\n    async loadGrammar(scopeName) {\n        return this._scopeToLang.get(scopeName);\n    }\n    addLanguage(l) {\n        this._langs.set(l.name, l);\n        if (l.aliases) {\n            l.aliases.forEach((a) => {\n                this._langs.set(a, l);\n            });\n        }\n        this._scopeToLang.set(l.scopeName, l);\n        if (l.injectTo) {\n            l.injectTo.forEach((i) => {\n                if (!this._injections.get(i))\n                    this._injections.set(i, []);\n                this._injections.get(i).push(l.scopeName);\n            });\n        }\n    }\n    getInjections(scopeName) {\n        const scopeParts = scopeName.split('.');\n        let injections = [];\n        for (let i = 1; i <= scopeParts.length; i++) {\n            const subScopeName = scopeParts.slice(0, i).join('.');\n            injections = [...injections, ...(this._injections.get(subScopeName) || [])];\n        }\n        return injections;\n    }\n}\n\nlet _defaultWasmLoader;\n/**\n * Set the default wasm loader for `loadWasm`.\n * @internal\n */\nfunction setDefaultWasmLoader(_loader) {\n    _defaultWasmLoader = _loader;\n}\n/**\n * Get the minimal shiki context for rendering.\n */\nasync function getShikiInternal(options = {}) {\n    async function normalizeGetter(p) {\n        return Promise.resolve(typeof p === 'function' ? p() : p).then(r => r.default || r);\n    }\n    async function resolveLangs(langs) {\n        return Array.from(new Set((await Promise.all(langs.map(async (lang) => await normalizeGetter(lang).then(r => Array.isArray(r) ? r : [r])))).flat()));\n    }\n    const wasmLoader = options.loadWasm || _defaultWasmLoader;\n    const [themes, langs,] = await Promise.all([\n        Promise.all((options.themes || []).map(normalizeGetter)).then(r => r.map(normalizeTheme)),\n        resolveLangs(options.langs || []),\n        wasmLoader ? loadWasm(wasmLoader) : undefined,\n    ]);\n    const resolver = new Resolver(Promise.resolve({\n        createOnigScanner(patterns) {\n            return createOnigScanner(patterns);\n        },\n        createOnigString(s) {\n            return createOnigString(s);\n        },\n    }), langs);\n    const _registry = new Registry(resolver, themes, langs);\n    Object.assign(_registry.alias, options.langAlias);\n    await _registry.init();\n    let _lastTheme;\n    function getLangGrammar(name) {\n        const _lang = _registry.getGrammar(name);\n        if (!_lang)\n            throw new Error(`[shikiji] Language \\`${name}\\` not found, you may need to load it first`);\n        return _lang;\n    }\n    function getTheme(name) {\n        if (name === 'none')\n            return { bg: '', fg: '', name: 'none', settings: [], type: 'dark' };\n        const _theme = _registry.getTheme(name);\n        if (!_theme)\n            throw new Error(`[shikiji] Theme \\`${name}\\` not found, you may need to load it first`);\n        return _theme;\n    }\n    function setTheme(name) {\n        const theme = getTheme(name);\n        if (_lastTheme !== name) {\n            _registry.setTheme(theme);\n            _lastTheme = name;\n        }\n        const colorMap = _registry.getColorMap();\n        return {\n            theme,\n            colorMap,\n        };\n    }\n    function getLoadedThemes() {\n        return _registry.getLoadedThemes();\n    }\n    function getLoadedLanguages() {\n        return _registry.getLoadedLanguages();\n    }\n    async function loadLanguage(...langs) {\n        await _registry.loadLanguages(await resolveLangs(langs));\n    }\n    async function loadTheme(...themes) {\n        await Promise.all(themes.map(async (theme) => isSpecialTheme(theme)\n            ? null\n            : _registry.loadTheme(await normalizeGetter(theme))));\n    }\n    function updateAlias(alias) {\n        Object.assign(_registry.alias, alias);\n    }\n    function getAlias() {\n        return _registry.alias;\n    }\n    return {\n        setTheme,\n        getTheme,\n        getLangGrammar,\n        getLoadedThemes,\n        getLoadedLanguages,\n        getAlias,\n        updateAlias,\n        loadLanguage,\n        loadTheme,\n    };\n}\n\n/**\n * Create a Shikiji core highlighter instance, with no languages or themes bundled.\n * Wasm and each language and theme must be loaded manually.\n *\n * @see http://shikiji.netlify.app/guide/install#fine-grained-bundle\n */\nasync function getHighlighterCore(options = {}) {\n    const internal = await getShikiInternal(options);\n    return {\n        codeToThemedTokens: (code, options) => codeToThemedTokens(internal, code, options),\n        codeToTokensWithThemes: (code, options) => codeToTokensWithThemes(internal, code, options),\n        codeToHast: (code, options) => codeToHast(internal, code, options),\n        codeToHtml: (code, options) => codeToHtml(internal, code, options),\n        loadLanguage: internal.loadLanguage,\n        loadTheme: internal.loadTheme,\n        getTheme: internal.getTheme,\n        getLangGrammar: internal.getLangGrammar,\n        setTheme: internal.setTheme,\n        getLoadedThemes: internal.getLoadedThemes,\n        getLoadedLanguages: internal.getLoadedLanguages,\n        getInternalContext: () => internal,\n    };\n}\n\n/**\n * Create a `getHighlighter` function with bundled themes and languages.\n *\n * @param bundledLanguages\n * @param bundledThemes\n * @param loadWasm\n */\nfunction createdBundledHighlighter(bundledLanguages, bundledThemes, loadWasm) {\n    async function getHighlighter(options = {}) {\n        function resolveLang(lang) {\n            if (typeof lang === 'string') {\n                if (isSpecialLang(lang))\n                    return [];\n                const bundle = bundledLanguages[lang];\n                if (!bundle)\n                    throw new Error(`[shikiji] Language \\`${lang}\\` is not built-in.`);\n                return bundle;\n            }\n            return lang;\n        }\n        function resolveTheme(theme) {\n            if (isSpecialTheme(theme))\n                return 'none';\n            if (typeof theme === 'string') {\n                const bundle = bundledThemes[theme];\n                if (!bundle)\n                    throw new Error(`[shikiji] Theme \\`${theme}\\` is not built-in.`);\n                return bundle;\n            }\n            return theme;\n        }\n        const _themes = (options.themes ?? []).map(i => resolveTheme(i));\n        const langs = (options.langs ?? [])\n            .map(i => resolveLang(i));\n        const core = await getHighlighterCore({\n            ...options,\n            themes: _themes,\n            langs,\n            loadWasm,\n        });\n        return {\n            ...core,\n            loadLanguage(...langs) {\n                return core.loadLanguage(...langs.map(resolveLang));\n            },\n            loadTheme(...themes) {\n                return core.loadTheme(...themes.map(resolveTheme));\n            },\n        };\n    }\n    return getHighlighter;\n}\nfunction createSingletonShorthands(getHighlighter) {\n    let _shiki;\n    async function _getHighlighter(options = {}) {\n        if (!_shiki) {\n            _shiki = getHighlighter({\n                themes: toArray(options.theme || []),\n                langs: toArray(options.lang || []),\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...toArray(options.theme || [])),\n                s.loadLanguage(...toArray(options.lang || [])),\n            ]);\n            return s;\n        }\n    }\n    return {\n        getSingletonHighlighter: () => _getHighlighter(),\n        async codeToHtml(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHtml(code, options);\n        },\n        async codeToHast(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHast(code, options);\n        },\n        async codeToThemedTokens(code, options) {\n            const shiki = await _getHighlighter(options);\n            return shiki.codeToThemedTokens(code, options);\n        },\n        async codeToTokensWithThemes(code, options) {\n            const shiki = await _getHighlighter({\n                lang: options.lang,\n                theme: Object.values(options.themes).filter(Boolean),\n            });\n            return shiki.codeToTokensWithThemes(code, options);\n        },\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/textmate.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/textmate.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INITIAL: () => (/* binding */ INITIAL),\n/* harmony export */   Registry: () => (/* binding */ Registry$1),\n/* harmony export */   StackElementMetadata: () => (/* binding */ StackElementMetadata)\n/* harmony export */ });\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/types.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.2_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js\");\n\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n({\n    InDebugMode: (typeof process !== 'undefined' && !!process.env['VSCODE_TEXTMATE_DEBUG'])\n});\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nvar EncodedTokenAttributes;\n(function (EncodedTokenAttributes) {\n    function toBinaryStr(encodedTokenAttributes) {\n        return encodedTokenAttributes.toString(2).padStart(32, \"0\");\n    }\n    EncodedTokenAttributes.toBinaryStr = toBinaryStr;\n    function print(encodedTokenAttributes) {\n        const languageId = EncodedTokenAttributes.getLanguageId(encodedTokenAttributes);\n        const tokenType = EncodedTokenAttributes.getTokenType(encodedTokenAttributes);\n        const fontStyle = EncodedTokenAttributes.getFontStyle(encodedTokenAttributes);\n        const foreground = EncodedTokenAttributes.getForeground(encodedTokenAttributes);\n        const background = EncodedTokenAttributes.getBackground(encodedTokenAttributes);\n        console.log({\n            languageId: languageId,\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: foreground,\n            background: background,\n        });\n    }\n    EncodedTokenAttributes.print = print;\n    function getLanguageId(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 255 /* EncodedTokenDataConsts.LANGUAGEID_MASK */) >>>\n            0 /* EncodedTokenDataConsts.LANGUAGEID_OFFSET */);\n    }\n    EncodedTokenAttributes.getLanguageId = getLanguageId;\n    function getTokenType(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 768 /* EncodedTokenDataConsts.TOKEN_TYPE_MASK */) >>>\n            8 /* EncodedTokenDataConsts.TOKEN_TYPE_OFFSET */);\n    }\n    EncodedTokenAttributes.getTokenType = getTokenType;\n    function containsBalancedBrackets(encodedTokenAttributes) {\n        return (encodedTokenAttributes & 1024 /* EncodedTokenDataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    EncodedTokenAttributes.containsBalancedBrackets = containsBalancedBrackets;\n    function getFontStyle(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 30720 /* EncodedTokenDataConsts.FONT_STYLE_MASK */) >>>\n            11 /* EncodedTokenDataConsts.FONT_STYLE_OFFSET */);\n    }\n    EncodedTokenAttributes.getFontStyle = getFontStyle;\n    function getForeground(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 16744448 /* EncodedTokenDataConsts.FOREGROUND_MASK */) >>>\n            15 /* EncodedTokenDataConsts.FOREGROUND_OFFSET */);\n    }\n    EncodedTokenAttributes.getForeground = getForeground;\n    function getBackground(encodedTokenAttributes) {\n        return ((encodedTokenAttributes & 4278190080 /* EncodedTokenDataConsts.BACKGROUND_MASK */) >>>\n            24 /* EncodedTokenDataConsts.BACKGROUND_OFFSET */);\n    }\n    EncodedTokenAttributes.getBackground = getBackground;\n    /**\n     * Updates the fields in `metadata`.\n     * A value of `0`, `NotSet` or `null` indicates that the corresponding field should be left as is.\n     */\n    function set(encodedTokenAttributes, languageId, tokenType, containsBalancedBrackets, fontStyle, foreground, background) {\n        let _languageId = EncodedTokenAttributes.getLanguageId(encodedTokenAttributes);\n        let _tokenType = EncodedTokenAttributes.getTokenType(encodedTokenAttributes);\n        let _containsBalancedBracketsBit = EncodedTokenAttributes.containsBalancedBrackets(encodedTokenAttributes) ? 1 : 0;\n        let _fontStyle = EncodedTokenAttributes.getFontStyle(encodedTokenAttributes);\n        let _foreground = EncodedTokenAttributes.getForeground(encodedTokenAttributes);\n        let _background = EncodedTokenAttributes.getBackground(encodedTokenAttributes);\n        if (languageId !== 0) {\n            _languageId = languageId;\n        }\n        if (tokenType !== 8 /* OptionalStandardTokenType.NotSet */) {\n            _tokenType = fromOptionalTokenType(tokenType);\n        }\n        if (containsBalancedBrackets !== null) {\n            _containsBalancedBracketsBit = containsBalancedBrackets ? 1 : 0;\n        }\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            _fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            _foreground = foreground;\n        }\n        if (background !== 0) {\n            _background = background;\n        }\n        return (((_languageId << 0 /* EncodedTokenDataConsts.LANGUAGEID_OFFSET */) |\n            (_tokenType << 8 /* EncodedTokenDataConsts.TOKEN_TYPE_OFFSET */) |\n            (_containsBalancedBracketsBit <<\n                10 /* EncodedTokenDataConsts.BALANCED_BRACKETS_OFFSET */) |\n            (_fontStyle << 11 /* EncodedTokenDataConsts.FONT_STYLE_OFFSET */) |\n            (_foreground << 15 /* EncodedTokenDataConsts.FOREGROUND_OFFSET */) |\n            (_background << 24 /* EncodedTokenDataConsts.BACKGROUND_OFFSET */)) >>>\n            0);\n    }\n    EncodedTokenAttributes.set = set;\n})(EncodedTokenAttributes || (EncodedTokenAttributes = {}));\nfunction toOptionalTokenType(standardType) {\n    return standardType;\n}\nfunction fromOptionalTokenType(standardType) {\n    return standardType;\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction createMatchers(selector, matchesName) {\n    const results = [];\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        let matcher = parseConjunction();\n        results.push({ matcher, priority });\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    return results;\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            return matcherInput => !!expressionToNegate && !expressionToNegate(matcherInput);\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        const matchers = [];\n        let matcher = parseOperand();\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => matchers.every(matcher => matcher(matcherInput)); // and\n    }\n    function parseInnerExpression() {\n        const matchers = [];\n        let matcher = parseConjunction();\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ','); // ignore subsequent commas\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => matchers.some(matcher => matcher(matcherInput)); // or\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    let regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction disposeOnigString(str) {\n    if (typeof str.dispose === 'function') {\n        str.dispose();\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction clone(something) {\n    return doClone(something);\n}\nfunction doClone(something) {\n    if (Array.isArray(something)) {\n        return cloneArray(something);\n    }\n    if (typeof something === 'object') {\n        return cloneObj(something);\n    }\n    return something;\n}\nfunction cloneArray(arr) {\n    let r = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n        r[i] = doClone(arr[i]);\n    }\n    return r;\n}\nfunction cloneObj(obj) {\n    let r = {};\n    for (let key in obj) {\n        r[key] = doClone(obj[key]);\n    }\n    return r;\n}\nfunction mergeObjects(target, ...sources) {\n    sources.forEach(source => {\n        for (let key in source) {\n            target[key] = source[key];\n        }\n    });\n    return target;\n}\nfunction basename(path) {\n    const idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n    if (idx === 0) {\n        return path;\n    }\n    else if (~idx === path.length - 1) {\n        return basename(path.substring(0, path.length - 1));\n    }\n    else {\n        return path.substr(~idx + 1);\n    }\n}\nlet CAPTURING_REGEX_SOURCE = /\\$(\\d+)|\\${(\\d+):\\/(downcase|upcase)}/g;\nclass RegexSource {\n    static hasCaptures(regexSource) {\n        if (regexSource === null) {\n            return false;\n        }\n        CAPTURING_REGEX_SOURCE.lastIndex = 0;\n        return CAPTURING_REGEX_SOURCE.test(regexSource);\n    }\n    static replaceCaptures(regexSource, captureSource, captureIndices) {\n        return regexSource.replace(CAPTURING_REGEX_SOURCE, (match, index, commandIndex, command) => {\n            let capture = captureIndices[parseInt(index || commandIndex, 10)];\n            if (capture) {\n                let result = captureSource.substring(capture.start, capture.end);\n                // Remove leading dots that would make the selector invalid\n                while (result[0] === '.') {\n                    result = result.substring(1);\n                }\n                switch (command) {\n                    case 'downcase':\n                        return result.toLowerCase();\n                    case 'upcase':\n                        return result.toUpperCase();\n                    default:\n                        return result;\n                }\n            }\n            else {\n                return match;\n            }\n        });\n    }\n}\nfunction strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nfunction strArrCmp(a, b) {\n    if (a === null && b === null) {\n        return 0;\n    }\n    if (!a) {\n        return -1;\n    }\n    if (!b) {\n        return 1;\n    }\n    let len1 = a.length;\n    let len2 = b.length;\n    if (len1 === len2) {\n        for (let i = 0; i < len1; i++) {\n            let res = strcmp(a[i], b[i]);\n            if (res !== 0) {\n                return res;\n            }\n        }\n        return 0;\n    }\n    return len1 - len2;\n}\nfunction isValidHexColor(hex) {\n    if (/^#[0-9a-f]{6}$/i.test(hex)) {\n        // #rrggbb\n        return true;\n    }\n    if (/^#[0-9a-f]{8}$/i.test(hex)) {\n        // #rrggbbaa\n        return true;\n    }\n    if (/^#[0-9a-f]{3}$/i.test(hex)) {\n        // #rgb\n        return true;\n    }\n    if (/^#[0-9a-f]{4}$/i.test(hex)) {\n        // #rgba\n        return true;\n    }\n    return false;\n}\n/**\n * Escapes regular expression characters in a given string\n */\nfunction escapeRegExpCharacters(value) {\n    return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&');\n}\nclass CachedFn {\n    fn;\n    cache = new Map();\n    constructor(fn) {\n        this.fn = fn;\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        const value = this.fn(key);\n        this.cache.set(key, value);\n        return value;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n/**\n * References the top level rule of a grammar with the given scope name.\n*/\nclass TopLevelRuleReference {\n    scopeName;\n    constructor(scopeName) {\n        this.scopeName = scopeName;\n    }\n    toKey() {\n        return this.scopeName;\n    }\n}\n/**\n * References a rule of a grammar in the top level repository section with the given name.\n*/\nclass TopLevelRepositoryRuleReference {\n    scopeName;\n    ruleName;\n    constructor(scopeName, ruleName) {\n        this.scopeName = scopeName;\n        this.ruleName = ruleName;\n    }\n    toKey() {\n        return `${this.scopeName}#${this.ruleName}`;\n    }\n}\nclass ExternalReferenceCollector {\n    _references = [];\n    _seenReferenceKeys = new Set();\n    get references() {\n        return this._references;\n    }\n    visitedRule = new Set();\n    add(reference) {\n        const key = reference.toKey();\n        if (this._seenReferenceKeys.has(key)) {\n            return;\n        }\n        this._seenReferenceKeys.add(key);\n        this._references.push(reference);\n    }\n}\nclass ScopeDependencyProcessor {\n    repo;\n    initialScopeName;\n    seenFullScopeRequests = new Set();\n    seenPartialScopeRequests = new Set();\n    Q;\n    constructor(repo, initialScopeName) {\n        this.repo = repo;\n        this.initialScopeName = initialScopeName;\n        this.seenFullScopeRequests.add(this.initialScopeName);\n        this.Q = [new TopLevelRuleReference(this.initialScopeName)];\n    }\n    processQueue() {\n        const q = this.Q;\n        this.Q = [];\n        const deps = new ExternalReferenceCollector();\n        for (const dep of q) {\n            collectReferencesOfReference(dep, this.initialScopeName, this.repo, deps);\n        }\n        for (const dep of deps.references) {\n            if (dep instanceof TopLevelRuleReference) {\n                if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                    // already processed\n                    continue;\n                }\n                this.seenFullScopeRequests.add(dep.scopeName);\n                this.Q.push(dep);\n            }\n            else {\n                if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                    // already processed in full\n                    continue;\n                }\n                if (this.seenPartialScopeRequests.has(dep.toKey())) {\n                    // already processed\n                    continue;\n                }\n                this.seenPartialScopeRequests.add(dep.toKey());\n                this.Q.push(dep);\n            }\n        }\n    }\n}\nfunction collectReferencesOfReference(reference, baseGrammarScopeName, repo, result) {\n    const selfGrammar = repo.lookup(reference.scopeName);\n    if (!selfGrammar) {\n        if (reference.scopeName === baseGrammarScopeName) {\n            throw new Error(`No grammar provided for <${baseGrammarScopeName}>`);\n        }\n        return;\n    }\n    const baseGrammar = repo.lookup(baseGrammarScopeName);\n    if (reference instanceof TopLevelRuleReference) {\n        collectExternalReferencesInTopLevelRule({ baseGrammar, selfGrammar }, result);\n    }\n    else {\n        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { baseGrammar, selfGrammar, repository: selfGrammar.repository }, result);\n    }\n    const injections = repo.injections(reference.scopeName);\n    if (injections) {\n        for (const injection of injections) {\n            result.add(new TopLevelRuleReference(injection));\n        }\n    }\n}\nfunction collectExternalReferencesInTopLevelRepositoryRule(ruleName, context, result) {\n    if (context.repository && context.repository[ruleName]) {\n        const rule = context.repository[ruleName];\n        collectExternalReferencesInRules([rule], context, result);\n    }\n}\nfunction collectExternalReferencesInTopLevelRule(context, result) {\n    if (context.selfGrammar.patterns && Array.isArray(context.selfGrammar.patterns)) {\n        collectExternalReferencesInRules(context.selfGrammar.patterns, { ...context, repository: context.selfGrammar.repository }, result);\n    }\n    if (context.selfGrammar.injections) {\n        collectExternalReferencesInRules(Object.values(context.selfGrammar.injections), { ...context, repository: context.selfGrammar.repository }, result);\n    }\n}\nfunction collectExternalReferencesInRules(rules, context, result) {\n    for (const rule of rules) {\n        if (result.visitedRule.has(rule)) {\n            continue;\n        }\n        result.visitedRule.add(rule);\n        const patternRepository = rule.repository ? mergeObjects({}, context.repository, rule.repository) : context.repository;\n        if (Array.isArray(rule.patterns)) {\n            collectExternalReferencesInRules(rule.patterns, { ...context, repository: patternRepository }, result);\n        }\n        const include = rule.include;\n        if (!include) {\n            continue;\n        }\n        const reference = parseInclude(include);\n        switch (reference.kind) {\n            case 0 /* IncludeReferenceKind.Base */:\n                collectExternalReferencesInTopLevelRule({ ...context, selfGrammar: context.baseGrammar }, result);\n                break;\n            case 1 /* IncludeReferenceKind.Self */:\n                collectExternalReferencesInTopLevelRule(context, result);\n                break;\n            case 2 /* IncludeReferenceKind.RelativeReference */:\n                collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { ...context, repository: patternRepository }, result);\n                break;\n            case 3 /* IncludeReferenceKind.TopLevelReference */:\n            case 4 /* IncludeReferenceKind.TopLevelRepositoryReference */:\n                const selfGrammar = reference.scopeName === context.selfGrammar.scopeName\n                    ? context.selfGrammar\n                    : reference.scopeName === context.baseGrammar.scopeName\n                        ? context.baseGrammar\n                        : undefined;\n                if (selfGrammar) {\n                    const newContext = { baseGrammar: context.baseGrammar, selfGrammar, repository: patternRepository };\n                    if (reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */) {\n                        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, newContext, result);\n                    }\n                    else {\n                        collectExternalReferencesInTopLevelRule(newContext, result);\n                    }\n                }\n                else {\n                    if (reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */) {\n                        result.add(new TopLevelRepositoryRuleReference(reference.scopeName, reference.ruleName));\n                    }\n                    else {\n                        result.add(new TopLevelRuleReference(reference.scopeName));\n                    }\n                }\n                break;\n        }\n    }\n}\nclass BaseReference {\n    kind = 0 /* IncludeReferenceKind.Base */;\n}\nclass SelfReference {\n    kind = 1 /* IncludeReferenceKind.Self */;\n}\nclass RelativeReference {\n    ruleName;\n    kind = 2 /* IncludeReferenceKind.RelativeReference */;\n    constructor(ruleName) {\n        this.ruleName = ruleName;\n    }\n}\nclass TopLevelReference {\n    scopeName;\n    kind = 3 /* IncludeReferenceKind.TopLevelReference */;\n    constructor(scopeName) {\n        this.scopeName = scopeName;\n    }\n}\nclass TopLevelRepositoryReference {\n    scopeName;\n    ruleName;\n    kind = 4 /* IncludeReferenceKind.TopLevelRepositoryReference */;\n    constructor(scopeName, ruleName) {\n        this.scopeName = scopeName;\n        this.ruleName = ruleName;\n    }\n}\nfunction parseInclude(include) {\n    if (include === '$base') {\n        return new BaseReference();\n    }\n    else if (include === '$self') {\n        return new SelfReference();\n    }\n    const indexOfSharp = include.indexOf(\"#\");\n    if (indexOfSharp === -1) {\n        return new TopLevelReference(include);\n    }\n    else if (indexOfSharp === 0) {\n        return new RelativeReference(include.substring(1));\n    }\n    else {\n        const scopeName = include.substring(0, indexOfSharp);\n        const ruleName = include.substring(indexOfSharp + 1);\n        return new TopLevelRepositoryReference(scopeName, ruleName);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nconst HAS_BACK_REFERENCES = /\\\\(\\d+)/;\nconst BACK_REFERENCING_END = /\\\\(\\d+)/g;\n// This is a special constant to indicate that the end regexp matched.\nconst endRuleId = -1;\n// This is a special constant to indicate that the while regexp matched.\nconst whileRuleId = -2;\nfunction ruleIdFromNumber(id) {\n    return id;\n}\nfunction ruleIdToNumber(id) {\n    return id;\n}\nclass Rule {\n    $location;\n    id;\n    _nameIsCapturing;\n    _name;\n    _contentNameIsCapturing;\n    _contentName;\n    constructor($location, id, name, contentName) {\n        this.$location = $location;\n        this.id = id;\n        this._name = name || null;\n        this._nameIsCapturing = RegexSource.hasCaptures(this._name);\n        this._contentName = contentName || null;\n        this._contentNameIsCapturing = RegexSource.hasCaptures(this._contentName);\n    }\n    get debugName() {\n        const location = this.$location ? `${basename(this.$location.filename)}:${this.$location.line}` : 'unknown';\n        return `${this.constructor.name}#${this.id} @ ${location}`;\n    }\n    getName(lineText, captureIndices) {\n        if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {\n            return this._name;\n        }\n        return RegexSource.replaceCaptures(this._name, lineText, captureIndices);\n    }\n    getContentName(lineText, captureIndices) {\n        if (!this._contentNameIsCapturing || this._contentName === null) {\n            return this._contentName;\n        }\n        return RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);\n    }\n}\nclass CaptureRule extends Rule {\n    retokenizeCapturedWithRuleId;\n    constructor($location, id, name, contentName, retokenizeCapturedWithRuleId) {\n        super($location, id, name, contentName);\n        this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;\n    }\n    dispose() {\n        // nothing to dispose\n    }\n    collectPatterns(grammar, out) {\n        throw new Error('Not supported!');\n    }\n    compile(grammar, endRegexSource) {\n        throw new Error('Not supported!');\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        throw new Error('Not supported!');\n    }\n}\nclass MatchRule extends Rule {\n    _match;\n    captures;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, match, captures) {\n        super($location, id, name, null);\n        this._match = new RegExpSource(match, this.id);\n        this.captures = captures;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    get debugMatchRegExp() {\n        return `${this._match.source}`;\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._match);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatterns(grammar, this._cachedCompiledPatterns);\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass IncludeOnlyRule extends Rule {\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, contentName, patterns) {\n        super($location, id, name, contentName);\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    collectPatterns(grammar, out) {\n        for (const pattern of this.patterns) {\n            const rule = grammar.getRule(pattern);\n            rule.collectPatterns(grammar, out);\n        }\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatterns(grammar, this._cachedCompiledPatterns);\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass BeginEndRule extends Rule {\n    _begin;\n    beginCaptures;\n    _end;\n    endHasBackReferences;\n    endCaptures;\n    applyEndPatternLast;\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    constructor($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {\n        super($location, id, name, contentName);\n        this._begin = new RegExpSource(begin, this.id);\n        this.beginCaptures = beginCaptures;\n        this._end = new RegExpSource(end ? end : '\\uFFFF', -1);\n        this.endHasBackReferences = this._end.hasBackReferences;\n        this.endCaptures = endCaptures;\n        this.applyEndPatternLast = applyEndPatternLast || false;\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    }\n    get debugBeginRegExp() {\n        return `${this._begin.source}`;\n    }\n    get debugEndRegExp() {\n        return `${this._end.source}`;\n    }\n    getEndWithResolvedBackReferences(lineText, captureIndices) {\n        return this._end.resolveBackReferences(lineText, captureIndices);\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._begin);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar, endRegexSource) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            for (const pattern of this.patterns) {\n                const rule = grammar.getRule(pattern);\n                rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n            }\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n            else {\n                this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n        }\n        if (this._end.hasBackReferences) {\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);\n            }\n            else {\n                this._cachedCompiledPatterns.setSource(0, endRegexSource);\n            }\n        }\n        return this._cachedCompiledPatterns;\n    }\n}\nclass BeginWhileRule extends Rule {\n    _begin;\n    beginCaptures;\n    whileCaptures;\n    _while;\n    whileHasBackReferences;\n    hasMissingPatterns;\n    patterns;\n    _cachedCompiledPatterns;\n    _cachedCompiledWhilePatterns;\n    constructor($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {\n        super($location, id, name, contentName);\n        this._begin = new RegExpSource(begin, this.id);\n        this.beginCaptures = beginCaptures;\n        this.whileCaptures = whileCaptures;\n        this._while = new RegExpSource(_while, whileRuleId);\n        this.whileHasBackReferences = this._while.hasBackReferences;\n        this.patterns = patterns.patterns;\n        this.hasMissingPatterns = patterns.hasMissingPatterns;\n        this._cachedCompiledPatterns = null;\n        this._cachedCompiledWhilePatterns = null;\n    }\n    dispose() {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n        if (this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns.dispose();\n            this._cachedCompiledWhilePatterns = null;\n        }\n    }\n    get debugBeginRegExp() {\n        return `${this._begin.source}`;\n    }\n    get debugWhileRegExp() {\n        return `${this._while.source}`;\n    }\n    getWhileWithResolvedBackReferences(lineText, captureIndices) {\n        return this._while.resolveBackReferences(lineText, captureIndices);\n    }\n    collectPatterns(grammar, out) {\n        out.push(this._begin);\n    }\n    compile(grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    }\n    compileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledPatterns(grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            for (const pattern of this.patterns) {\n                const rule = grammar.getRule(pattern);\n                rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n            }\n        }\n        return this._cachedCompiledPatterns;\n    }\n    compileWhile(grammar, endRegexSource) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);\n    }\n    compileWhileAG(grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    }\n    _getCachedCompiledWhilePatterns(grammar, endRegexSource) {\n        if (!this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns = new RegExpSourceList();\n            this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);\n        }\n        if (this._while.hasBackReferences) {\n            this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : '\\uFFFF');\n        }\n        return this._cachedCompiledWhilePatterns;\n    }\n}\nclass RuleFactory {\n    static createCaptureRule(helper, $location, name, contentName, retokenizeCapturedWithRuleId) {\n        return helper.registerRule((id) => {\n            return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);\n        });\n    }\n    static getCompiledRuleId(desc, helper, repository) {\n        if (!desc.id) {\n            helper.registerRule((id) => {\n                desc.id = id;\n                if (desc.match) {\n                    return new MatchRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.match, RuleFactory._compileCaptures(desc.captures, helper, repository));\n                }\n                if (typeof desc.begin === 'undefined') {\n                    if (desc.repository) {\n                        repository = mergeObjects({}, repository, desc.repository);\n                    }\n                    let patterns = desc.patterns;\n                    if (typeof patterns === 'undefined' && desc.include) {\n                        patterns = [{ include: desc.include }];\n                    }\n                    return new IncludeOnlyRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, RuleFactory._compilePatterns(patterns, helper, repository));\n                }\n                if (desc.while) {\n                    return new BeginWhileRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.while, RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository), RuleFactory._compilePatterns(desc.patterns, helper, repository));\n                }\n                return new BeginEndRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.end, RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository), desc.applyEndPatternLast, RuleFactory._compilePatterns(desc.patterns, helper, repository));\n            });\n        }\n        return desc.id;\n    }\n    static _compileCaptures(captures, helper, repository) {\n        let r = [];\n        if (captures) {\n            // Find the maximum capture id\n            let maximumCaptureId = 0;\n            for (const captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                const numericCaptureId = parseInt(captureId, 10);\n                if (numericCaptureId > maximumCaptureId) {\n                    maximumCaptureId = numericCaptureId;\n                }\n            }\n            // Initialize result\n            for (let i = 0; i <= maximumCaptureId; i++) {\n                r[i] = null;\n            }\n            // Fill out result\n            for (const captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                const numericCaptureId = parseInt(captureId, 10);\n                let retokenizeCapturedWithRuleId = 0;\n                if (captures[captureId].patterns) {\n                    retokenizeCapturedWithRuleId = RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);\n                }\n                r[numericCaptureId] = RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);\n            }\n        }\n        return r;\n    }\n    static _compilePatterns(patterns, helper, repository) {\n        let r = [];\n        if (patterns) {\n            for (let i = 0, len = patterns.length; i < len; i++) {\n                const pattern = patterns[i];\n                let ruleId = -1;\n                if (pattern.include) {\n                    const reference = parseInclude(pattern.include);\n                    switch (reference.kind) {\n                        case 0 /* IncludeReferenceKind.Base */:\n                        case 1 /* IncludeReferenceKind.Self */:\n                            ruleId = RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);\n                            break;\n                        case 2 /* IncludeReferenceKind.RelativeReference */:\n                            // Local include found in `repository`\n                            let localIncludedRule = repository[reference.ruleName];\n                            if (localIncludedRule) {\n                                ruleId = RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);\n                            }\n                            break;\n                        case 3 /* IncludeReferenceKind.TopLevelReference */:\n                        case 4 /* IncludeReferenceKind.TopLevelRepositoryReference */:\n                            const externalGrammarName = reference.scopeName;\n                            const externalGrammarInclude = reference.kind === 4 /* IncludeReferenceKind.TopLevelRepositoryReference */\n                                ? reference.ruleName\n                                : null;\n                            // External include\n                            const externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);\n                            if (externalGrammar) {\n                                if (externalGrammarInclude) {\n                                    let externalIncludedRule = externalGrammar.repository[externalGrammarInclude];\n                                    if (externalIncludedRule) {\n                                        ruleId = RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);\n                                    }\n                                }\n                                else {\n                                    ruleId = RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);\n                                }\n                            }\n                            break;\n                    }\n                }\n                else {\n                    ruleId = RuleFactory.getCompiledRuleId(pattern, helper, repository);\n                }\n                if (ruleId !== -1) {\n                    const rule = helper.getRule(ruleId);\n                    let skipRule = false;\n                    if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {\n                        if (rule.hasMissingPatterns && rule.patterns.length === 0) {\n                            skipRule = true;\n                        }\n                    }\n                    if (skipRule) {\n                        // console.log('REMOVING RULE ENTIRELY DUE TO EMPTY PATTERNS THAT ARE MISSING');\n                        continue;\n                    }\n                    r.push(ruleId);\n                }\n            }\n        }\n        return {\n            patterns: r,\n            hasMissingPatterns: ((patterns ? patterns.length : 0) !== r.length)\n        };\n    }\n}\nclass RegExpSource {\n    source;\n    ruleId;\n    hasAnchor;\n    hasBackReferences;\n    _anchorCache;\n    constructor(regExpSource, ruleId) {\n        if (regExpSource) {\n            const len = regExpSource.length;\n            let lastPushedPos = 0;\n            let output = [];\n            let hasAnchor = false;\n            for (let pos = 0; pos < len; pos++) {\n                const ch = regExpSource.charAt(pos);\n                if (ch === '\\\\') {\n                    if (pos + 1 < len) {\n                        const nextCh = regExpSource.charAt(pos + 1);\n                        if (nextCh === 'z') {\n                            output.push(regExpSource.substring(lastPushedPos, pos));\n                            output.push('$(?!\\\\n)(?<!\\\\n)');\n                            lastPushedPos = pos + 2;\n                        }\n                        else if (nextCh === 'A' || nextCh === 'G') {\n                            hasAnchor = true;\n                        }\n                        pos++;\n                    }\n                }\n            }\n            this.hasAnchor = hasAnchor;\n            if (lastPushedPos === 0) {\n                // No \\z hit\n                this.source = regExpSource;\n            }\n            else {\n                output.push(regExpSource.substring(lastPushedPos, len));\n                this.source = output.join('');\n            }\n        }\n        else {\n            this.hasAnchor = false;\n            this.source = regExpSource;\n        }\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n        else {\n            this._anchorCache = null;\n        }\n        this.ruleId = ruleId;\n        this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);\n        // console.log('input: ' + regExpSource + ' => ' + this.source + ', ' + this.hasAnchor);\n    }\n    clone() {\n        return new RegExpSource(this.source, this.ruleId);\n    }\n    setSource(newSource) {\n        if (this.source === newSource) {\n            return;\n        }\n        this.source = newSource;\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n    }\n    resolveBackReferences(lineText, captureIndices) {\n        let capturedValues = captureIndices.map((capture) => {\n            return lineText.substring(capture.start, capture.end);\n        });\n        BACK_REFERENCING_END.lastIndex = 0;\n        return this.source.replace(BACK_REFERENCING_END, (match, g1) => {\n            return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || '');\n        });\n    }\n    _buildAnchorCache() {\n        let A0_G0_result = [];\n        let A0_G1_result = [];\n        let A1_G0_result = [];\n        let A1_G1_result = [];\n        let pos, len, ch, nextCh;\n        for (pos = 0, len = this.source.length; pos < len; pos++) {\n            ch = this.source.charAt(pos);\n            A0_G0_result[pos] = ch;\n            A0_G1_result[pos] = ch;\n            A1_G0_result[pos] = ch;\n            A1_G1_result[pos] = ch;\n            if (ch === '\\\\') {\n                if (pos + 1 < len) {\n                    nextCh = this.source.charAt(pos + 1);\n                    if (nextCh === 'A') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = '\\uFFFF';\n                        A1_G0_result[pos + 1] = 'A';\n                        A1_G1_result[pos + 1] = 'A';\n                    }\n                    else if (nextCh === 'G') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = 'G';\n                        A1_G0_result[pos + 1] = '\\uFFFF';\n                        A1_G1_result[pos + 1] = 'G';\n                    }\n                    else {\n                        A0_G0_result[pos + 1] = nextCh;\n                        A0_G1_result[pos + 1] = nextCh;\n                        A1_G0_result[pos + 1] = nextCh;\n                        A1_G1_result[pos + 1] = nextCh;\n                    }\n                    pos++;\n                }\n            }\n        }\n        return {\n            A0_G0: A0_G0_result.join(''),\n            A0_G1: A0_G1_result.join(''),\n            A1_G0: A1_G0_result.join(''),\n            A1_G1: A1_G1_result.join('')\n        };\n    }\n    resolveAnchors(allowA, allowG) {\n        if (!this.hasAnchor || !this._anchorCache) {\n            return this.source;\n        }\n        if (allowA) {\n            if (allowG) {\n                return this._anchorCache.A1_G1;\n            }\n            else {\n                return this._anchorCache.A1_G0;\n            }\n        }\n        else {\n            if (allowG) {\n                return this._anchorCache.A0_G1;\n            }\n            else {\n                return this._anchorCache.A0_G0;\n            }\n        }\n    }\n}\nclass RegExpSourceList {\n    _items;\n    _hasAnchors;\n    _cached;\n    _anchorCache;\n    constructor() {\n        this._items = [];\n        this._hasAnchors = false;\n        this._cached = null;\n        this._anchorCache = {\n            A0_G0: null,\n            A0_G1: null,\n            A1_G0: null,\n            A1_G1: null\n        };\n    }\n    dispose() {\n        this._disposeCaches();\n    }\n    _disposeCaches() {\n        if (this._cached) {\n            this._cached.dispose();\n            this._cached = null;\n        }\n        if (this._anchorCache.A0_G0) {\n            this._anchorCache.A0_G0.dispose();\n            this._anchorCache.A0_G0 = null;\n        }\n        if (this._anchorCache.A0_G1) {\n            this._anchorCache.A0_G1.dispose();\n            this._anchorCache.A0_G1 = null;\n        }\n        if (this._anchorCache.A1_G0) {\n            this._anchorCache.A1_G0.dispose();\n            this._anchorCache.A1_G0 = null;\n        }\n        if (this._anchorCache.A1_G1) {\n            this._anchorCache.A1_G1.dispose();\n            this._anchorCache.A1_G1 = null;\n        }\n    }\n    push(item) {\n        this._items.push(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    }\n    unshift(item) {\n        this._items.unshift(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    }\n    length() {\n        return this._items.length;\n    }\n    setSource(index, newSource) {\n        if (this._items[index].source !== newSource) {\n            // bust the cache\n            this._disposeCaches();\n            this._items[index].setSource(newSource);\n        }\n    }\n    compile(onigLib) {\n        if (!this._cached) {\n            let regExps = this._items.map(e => e.source);\n            this._cached = new CompiledRule(onigLib, regExps, this._items.map(e => e.ruleId));\n        }\n        return this._cached;\n    }\n    compileAG(onigLib, allowA, allowG) {\n        if (!this._hasAnchors) {\n            return this.compile(onigLib);\n        }\n        else {\n            if (allowA) {\n                if (allowG) {\n                    if (!this._anchorCache.A1_G1) {\n                        this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G1;\n                }\n                else {\n                    if (!this._anchorCache.A1_G0) {\n                        this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G0;\n                }\n            }\n            else {\n                if (allowG) {\n                    if (!this._anchorCache.A0_G1) {\n                        this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G1;\n                }\n                else {\n                    if (!this._anchorCache.A0_G0) {\n                        this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G0;\n                }\n            }\n        }\n    }\n    _resolveAnchors(onigLib, allowA, allowG) {\n        let regExps = this._items.map(e => e.resolveAnchors(allowA, allowG));\n        return new CompiledRule(onigLib, regExps, this._items.map(e => e.ruleId));\n    }\n}\nclass CompiledRule {\n    regExps;\n    rules;\n    scanner;\n    constructor(onigLib, regExps, rules) {\n        this.regExps = regExps;\n        this.rules = rules;\n        this.scanner = onigLib.createOnigScanner(regExps);\n    }\n    dispose() {\n        if (typeof this.scanner.dispose === \"function\") {\n            this.scanner.dispose();\n        }\n    }\n    toString() {\n        const r = [];\n        for (let i = 0, len = this.rules.length; i < len; i++) {\n            r.push(\"   - \" + this.rules[i] + \": \" + this.regExps[i]);\n        }\n        return r.join(\"\\n\");\n    }\n    findNextMatchSync(string, startPosition, options) {\n        const result = this.scanner.findNextMatchSync(string, startPosition, options);\n        if (!result) {\n            return null;\n        }\n        return {\n            ruleId: this.rules[result.index],\n            captureIndices: result.captureIndices,\n        };\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass Theme {\n    _colorMap;\n    _defaults;\n    _root;\n    static createFromRawTheme(source, colorMap) {\n        return this.createFromParsedTheme(parseTheme(source), colorMap);\n    }\n    static createFromParsedTheme(source, colorMap) {\n        return resolveParsedThemeRules(source, colorMap);\n    }\n    _cachedMatchRoot = new CachedFn((scopeName) => this._root.match(scopeName));\n    constructor(_colorMap, _defaults, _root) {\n        this._colorMap = _colorMap;\n        this._defaults = _defaults;\n        this._root = _root;\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    getDefaults() {\n        return this._defaults;\n    }\n    match(scopePath) {\n        if (scopePath === null) {\n            return this._defaults;\n        }\n        const scopeName = scopePath.scopeName;\n        const matchingTrieElements = this._cachedMatchRoot.get(scopeName);\n        const effectiveRule = matchingTrieElements.find((v) => _scopePathMatchesParentScopes(scopePath.parent, v.parentScopes));\n        if (!effectiveRule) {\n            return null;\n        }\n        return new StyleAttributes(effectiveRule.fontStyle, effectiveRule.foreground, effectiveRule.background);\n    }\n}\nclass ScopeStack {\n    parent;\n    scopeName;\n    static push(path, scopeNames) {\n        for (const name of scopeNames) {\n            path = new ScopeStack(path, name);\n        }\n        return path;\n    }\n    static from(...segments) {\n        let result = null;\n        for (let i = 0; i < segments.length; i++) {\n            result = new ScopeStack(result, segments[i]);\n        }\n        return result;\n    }\n    constructor(parent, scopeName) {\n        this.parent = parent;\n        this.scopeName = scopeName;\n    }\n    push(scopeName) {\n        return new ScopeStack(this, scopeName);\n    }\n    getSegments() {\n        let item = this;\n        const result = [];\n        while (item) {\n            result.push(item.scopeName);\n            item = item.parent;\n        }\n        result.reverse();\n        return result;\n    }\n    toString() {\n        return this.getSegments().join(' ');\n    }\n    extends(other) {\n        if (this === other) {\n            return true;\n        }\n        if (this.parent === null) {\n            return false;\n        }\n        return this.parent.extends(other);\n    }\n    getExtensionIfDefined(base) {\n        const result = [];\n        let item = this;\n        while (item && item !== base) {\n            result.push(item.scopeName);\n            item = item.parent;\n        }\n        return item === base ? result.reverse() : undefined;\n    }\n}\nfunction _scopePathMatchesParentScopes(scopePath, parentScopes) {\n    if (parentScopes === null) {\n        return true;\n    }\n    let index = 0;\n    let scopePattern = parentScopes[index];\n    while (scopePath) {\n        if (_matchesScope(scopePath.scopeName, scopePattern)) {\n            index++;\n            if (index === parentScopes.length) {\n                return true;\n            }\n            scopePattern = parentScopes[index];\n        }\n        scopePath = scopePath.parent;\n    }\n    return false;\n}\nfunction _matchesScope(scopeName, scopePattern) {\n    return scopePattern === scopeName || (scopeName.startsWith(scopePattern) && scopeName[scopePattern.length] === '.');\n}\nclass StyleAttributes {\n    fontStyle;\n    foregroundId;\n    backgroundId;\n    constructor(fontStyle, foregroundId, backgroundId) {\n        this.fontStyle = fontStyle;\n        this.foregroundId = foregroundId;\n        this.backgroundId = backgroundId;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nfunction parseTheme(source) {\n    if (!source) {\n        return [];\n    }\n    if (!source.settings || !Array.isArray(source.settings)) {\n        return [];\n    }\n    let settings = source.settings;\n    let result = [], resultLen = 0;\n    for (let i = 0, len = settings.length; i < len; i++) {\n        let entry = settings[i];\n        if (!entry.settings) {\n            continue;\n        }\n        let scopes;\n        if (typeof entry.scope === 'string') {\n            let _scope = entry.scope;\n            // remove leading commas\n            _scope = _scope.replace(/^[,]+/, '');\n            // remove trailing commans\n            _scope = _scope.replace(/[,]+$/, '');\n            scopes = _scope.split(',');\n        }\n        else if (Array.isArray(entry.scope)) {\n            scopes = entry.scope;\n        }\n        else {\n            scopes = [''];\n        }\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        if (typeof entry.settings.fontStyle === 'string') {\n            fontStyle = 0 /* FontStyle.None */;\n            let segments = entry.settings.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                let segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.settings.foreground === 'string' && isValidHexColor(entry.settings.foreground)) {\n            foreground = entry.settings.foreground;\n        }\n        let background = null;\n        if (typeof entry.settings.background === 'string' && isValidHexColor(entry.settings.background)) {\n            background = entry.settings.background;\n        }\n        for (let j = 0, lenJ = scopes.length; j < lenJ; j++) {\n            let _scope = scopes[j].trim();\n            let segments = _scope.split(' ');\n            let scope = segments[segments.length - 1];\n            let parentScopes = null;\n            if (segments.length > 1) {\n                parentScopes = segments.slice(0, segments.length - 1);\n                parentScopes.reverse();\n            }\n            result[resultLen++] = new ParsedThemeRule(scope, parentScopes, i, fontStyle, foreground, background);\n        }\n    }\n    return result;\n}\nclass ParsedThemeRule {\n    scope;\n    parentScopes;\n    index;\n    fontStyle;\n    foreground;\n    background;\n    constructor(scope, parentScopes, index, fontStyle, foreground, background) {\n        this.scope = scope;\n        this.parentScopes = parentScopes;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedThemeRules(parsedThemeRules, _colorMap) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        let r = strcmp(a.scope, b.scope);\n        if (r !== 0) {\n            return r;\n        }\n        r = strArrCmp(a.parentScopes, b.parentScopes);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* FontStyle.None */;\n    let defaultForeground = '#000000';\n    let defaultBackground = '#ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === '') {\n        let incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    let colorMap = new ColorMap(_colorMap);\n    let defaults = new StyleAttributes(defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));\n    let root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* FontStyle.NotSet */, 0, 0), []);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        let rule = parsedThemeRules[i];\n        root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new Theme(colorMap, defaults, root);\n}\nclass ColorMap {\n    _isFrozen;\n    _lastColorId;\n    _id2color;\n    _color2id;\n    constructor(_colorMap) {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n        if (Array.isArray(_colorMap)) {\n            this._isFrozen = true;\n            for (let i = 0, len = _colorMap.length; i < len; i++) {\n                this._color2id[_colorMap[i]] = i;\n                this._id2color[i] = _colorMap[i];\n            }\n        }\n        else {\n            this._isFrozen = false;\n        }\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        color = color.toUpperCase();\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        if (this._isFrozen) {\n            throw new Error(`Missing color in color map - ${color}`);\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nclass ThemeTrieElementRule {\n    scopeDepth;\n    parentScopes;\n    fontStyle;\n    foreground;\n    background;\n    constructor(scopeDepth, parentScopes, fontStyle, foreground, background) {\n        this.scopeDepth = scopeDepth;\n        this.parentScopes = parentScopes;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);\n    }\n    static cloneArr(arr) {\n        let r = [];\n        for (let i = 0, len = arr.length; i < len; i++) {\n            r[i] = arr[i].clone();\n        }\n        return r;\n    }\n    acceptOverwrite(scopeDepth, fontStyle, foreground, background) {\n        if (this.scopeDepth > scopeDepth) {\n            console.log('how did this happen?');\n        }\n        else {\n            this.scopeDepth = scopeDepth;\n        }\n        // console.log('TODO -> my depth: ' + this.scopeDepth + ', overwriting depth: ' + scopeDepth);\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            this.fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            this.foreground = foreground;\n        }\n        if (background !== 0) {\n            this.background = background;\n        }\n    }\n}\nclass ThemeTrieElement {\n    _mainRule;\n    _children;\n    _rulesWithParentScopes;\n    constructor(_mainRule, rulesWithParentScopes = [], _children = {}) {\n        this._mainRule = _mainRule;\n        this._children = _children;\n        this._rulesWithParentScopes = rulesWithParentScopes;\n    }\n    static _sortBySpecificity(arr) {\n        if (arr.length === 1) {\n            return arr;\n        }\n        arr.sort(this._cmpBySpecificity);\n        return arr;\n    }\n    static _cmpBySpecificity(a, b) {\n        if (a.scopeDepth === b.scopeDepth) {\n            const aParentScopes = a.parentScopes;\n            const bParentScopes = b.parentScopes;\n            let aParentScopesLen = aParentScopes === null ? 0 : aParentScopes.length;\n            let bParentScopesLen = bParentScopes === null ? 0 : bParentScopes.length;\n            if (aParentScopesLen === bParentScopesLen) {\n                for (let i = 0; i < aParentScopesLen; i++) {\n                    const aLen = aParentScopes[i].length;\n                    const bLen = bParentScopes[i].length;\n                    if (aLen !== bLen) {\n                        return bLen - aLen;\n                    }\n                }\n            }\n            return bParentScopesLen - aParentScopesLen;\n        }\n        return b.scopeDepth - a.scopeDepth;\n    }\n    match(scope) {\n        if (scope === '') {\n            return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n        }\n        let dotIndex = scope.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        if (this._children.hasOwnProperty(head)) {\n            return this._children[head].match(tail);\n        }\n        return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n    }\n    insert(scopeDepth, scope, parentScopes, fontStyle, foreground, background) {\n        if (scope === '') {\n            this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);\n            return;\n        }\n        let dotIndex = scope.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        let child;\n        if (this._children.hasOwnProperty(head)) {\n            child = this._children[head];\n        }\n        else {\n            child = new ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));\n            this._children[head] = child;\n        }\n        child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);\n    }\n    _doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background) {\n        if (parentScopes === null) {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n            return;\n        }\n        // Try to merge into existing rule\n        for (let i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {\n            let rule = this._rulesWithParentScopes[i];\n            if (strArrCmp(rule.parentScopes, parentScopes) === 0) {\n                // bingo! => we get to merge this into an existing one\n                rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n                return;\n            }\n        }\n        // Must add a new rule\n        // Inherit from main rule\n        if (fontStyle === -1 /* FontStyle.NotSet */) {\n            fontStyle = this._mainRule.fontStyle;\n        }\n        if (foreground === 0) {\n            foreground = this._mainRule.foreground;\n        }\n        if (background === 0) {\n            background = this._mainRule.background;\n        }\n        this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass BasicScopeAttributes {\n    languageId;\n    tokenType;\n    constructor(languageId, tokenType) {\n        this.languageId = languageId;\n        this.tokenType = tokenType;\n    }\n}\nclass BasicScopeAttributesProvider {\n    _defaultAttributes;\n    _embeddedLanguagesMatcher;\n    constructor(initialLanguageId, embeddedLanguages) {\n        this._defaultAttributes = new BasicScopeAttributes(initialLanguageId, 8 /* OptionalStandardTokenType.NotSet */);\n        this._embeddedLanguagesMatcher = new ScopeMatcher(Object.entries(embeddedLanguages || {}));\n    }\n    getDefaultAttributes() {\n        return this._defaultAttributes;\n    }\n    getBasicScopeAttributes(scopeName) {\n        if (scopeName === null) {\n            return BasicScopeAttributesProvider._NULL_SCOPE_METADATA;\n        }\n        return this._getBasicScopeAttributes.get(scopeName);\n    }\n    static _NULL_SCOPE_METADATA = new BasicScopeAttributes(0, 0);\n    _getBasicScopeAttributes = new CachedFn((scopeName) => {\n        const languageId = this._scopeToLanguage(scopeName);\n        const standardTokenType = this._toStandardTokenType(scopeName);\n        return new BasicScopeAttributes(languageId, standardTokenType);\n    });\n    /**\n     * Given a produced TM scope, return the language that token describes or null if unknown.\n     * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null\n     */\n    _scopeToLanguage(scope) {\n        return this._embeddedLanguagesMatcher.match(scope) || 0;\n    }\n    _toStandardTokenType(scopeName) {\n        const m = scopeName.match(BasicScopeAttributesProvider.STANDARD_TOKEN_TYPE_REGEXP);\n        if (!m) {\n            return 8 /* OptionalStandardTokenType.NotSet */;\n        }\n        switch (m[1]) {\n            case \"comment\":\n                return 1 /* OptionalStandardTokenType.Comment */;\n            case \"string\":\n                return 2 /* OptionalStandardTokenType.String */;\n            case \"regex\":\n                return 3 /* OptionalStandardTokenType.RegEx */;\n            case \"meta.embedded\":\n                return 0 /* OptionalStandardTokenType.Other */;\n        }\n        throw new Error(\"Unexpected match for standard token type!\");\n    }\n    static STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|meta\\.embedded)\\b/;\n}\nclass ScopeMatcher {\n    values;\n    scopesRegExp;\n    constructor(values) {\n        if (values.length === 0) {\n            this.values = null;\n            this.scopesRegExp = null;\n        }\n        else {\n            this.values = new Map(values);\n            // create the regex\n            const escapedScopes = values.map(([scopeName, value]) => escapeRegExpCharacters(scopeName));\n            escapedScopes.sort();\n            escapedScopes.reverse(); // Longest scope first\n            this.scopesRegExp = new RegExp(`^((${escapedScopes.join(\")|(\")}))($|\\\\.)`, \"\");\n        }\n    }\n    match(scope) {\n        if (!this.scopesRegExp) {\n            return undefined;\n        }\n        const m = scope.match(this.scopesRegExp);\n        if (!m) {\n            // no scopes matched\n            return undefined;\n        }\n        return this.values.get(m[1]);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass TokenizeStringResult {\n    stack;\n    stoppedEarly;\n    constructor(stack, stoppedEarly) {\n        this.stack = stack;\n        this.stoppedEarly = stoppedEarly;\n    }\n}\n/**\n * Tokenize a string\n * @param grammar\n * @param lineText\n * @param isFirstLine\n * @param linePos\n * @param stack\n * @param lineTokens\n * @param checkWhileConditions\n * @param timeLimit Use `0` to indicate no time limit\n * @returns the StackElement or StackElement.TIME_LIMIT_REACHED if the time limit has been reached\n */\nfunction _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {\n    const lineLength = lineText.content.length;\n    let STOP = false;\n    let anchorPosition = -1;\n    if (checkWhileConditions) {\n        const whileCheckResult = _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens);\n        stack = whileCheckResult.stack;\n        linePos = whileCheckResult.linePos;\n        isFirstLine = whileCheckResult.isFirstLine;\n        anchorPosition = whileCheckResult.anchorPosition;\n    }\n    const startTime = Date.now();\n    while (!STOP) {\n        if (timeLimit !== 0) {\n            const elapsedTime = Date.now() - startTime;\n            if (elapsedTime > timeLimit) {\n                return new TokenizeStringResult(stack, true);\n            }\n        }\n        scanNext(); // potentially modifies linePos && anchorPosition\n    }\n    return new TokenizeStringResult(stack, false);\n    function scanNext() {\n        const r = matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n        if (!r) {\n            // No match\n            lineTokens.produce(stack, lineLength);\n            STOP = true;\n            return;\n        }\n        const captureIndices = r.captureIndices;\n        const matchedRuleId = r.matchedRuleId;\n        const hasAdvanced = captureIndices && captureIndices.length > 0\n            ? captureIndices[0].end > linePos\n            : false;\n        if (matchedRuleId === endRuleId) {\n            // We matched the `end` for this rule => pop it\n            const poppedRule = stack.getRule(grammar);\n            lineTokens.produce(stack, captureIndices[0].start);\n            stack = stack.withContentNameScopesList(stack.nameScopesList);\n            handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, poppedRule.endCaptures, captureIndices);\n            lineTokens.produce(stack, captureIndices[0].end);\n            // pop\n            const popped = stack;\n            stack = stack.parent;\n            anchorPosition = popped.getAnchorPos();\n            if (!hasAdvanced && popped.getEnterPos() === linePos) {\n                // See https://github.com/Microsoft/vscode-textmate/issues/12\n                // Let's assume this was a mistake by the grammar author and the intent was to continue in this state\n                stack = popped;\n                lineTokens.produce(stack, lineLength);\n                STOP = true;\n                return;\n            }\n        }\n        else {\n            // We matched a rule!\n            const _rule = grammar.getRule(matchedRuleId);\n            lineTokens.produce(stack, captureIndices[0].start);\n            const beforePush = stack;\n            // push it on the stack rule\n            const scopeName = _rule.getName(lineText.content, captureIndices);\n            const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n            stack = stack.push(matchedRuleId, linePos, anchorPosition, captureIndices[0].end === lineLength, null, nameScopesList, nameScopesList);\n            if (_rule instanceof BeginEndRule) {\n                const pushedRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                const contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n                stack = stack.withContentNameScopesList(contentNameScopesList);\n                if (pushedRule.endHasBackReferences) {\n                    stack = stack.withEndRule(pushedRule.getEndWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else if (_rule instanceof BeginWhileRule) {\n                const pushedRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                const contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n                stack = stack.withContentNameScopesList(contentNameScopesList);\n                if (pushedRule.whileHasBackReferences) {\n                    stack = stack.withEndRule(pushedRule.getWhileWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else {\n                const matchingRule = _rule;\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, matchingRule.captures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                // pop rule immediately since it is a MatchRule\n                stack = stack.pop();\n                if (!hasAdvanced) {\n                    stack = stack.safePop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n        }\n        if (captureIndices[0].end > linePos) {\n            // Advance stream\n            linePos = captureIndices[0].end;\n            isFirstLine = false;\n        }\n    }\n}\n/**\n * Walk the stack from bottom to top, and check each while condition in this order.\n * If any fails, cut off the entire stack above the failed while condition. While conditions\n * may also advance the linePosition.\n */\nfunction _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {\n    let anchorPosition = (stack.beginRuleCapturedEOL ? 0 : -1);\n    const whileRules = [];\n    for (let node = stack; node; node = node.pop()) {\n        const nodeRule = node.getRule(grammar);\n        if (nodeRule instanceof BeginWhileRule) {\n            whileRules.push({\n                rule: nodeRule,\n                stack: node\n            });\n        }\n    }\n    for (let whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {\n        const { ruleScanner, findOptions } = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition);\n        const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (r) {\n            const matchedRuleId = r.ruleId;\n            if (matchedRuleId !== whileRuleId) {\n                // we shouldn't end up here\n                stack = whileRule.stack.pop();\n                break;\n            }\n            if (r.captureIndices && r.captureIndices.length) {\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].start);\n                handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].end);\n                anchorPosition = r.captureIndices[0].end;\n                if (r.captureIndices[0].end > linePos) {\n                    linePos = r.captureIndices[0].end;\n                    isFirstLine = false;\n                }\n            }\n        }\n        else {\n            stack = whileRule.stack.pop();\n            break;\n        }\n    }\n    return { stack: stack, linePos: linePos, anchorPosition: anchorPosition, isFirstLine: isFirstLine };\n}\nfunction matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // Look for normal grammar rule\n    const matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    // Look for injected rules\n    const injections = grammar.getInjections();\n    if (injections.length === 0) {\n        // No injections whatsoever => early return\n        return matchResult;\n    }\n    const injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    if (!injectionResult) {\n        // No injections matched => early return\n        return matchResult;\n    }\n    if (!matchResult) {\n        // Only injections matched => early return\n        return injectionResult;\n    }\n    // Decide if `matchResult` or `injectionResult` should win\n    const matchResultScore = matchResult.captureIndices[0].start;\n    const injectionResultScore = injectionResult.captureIndices[0].start;\n    if (injectionResultScore < matchResultScore || (injectionResult.priorityMatch && injectionResultScore === matchResultScore)) {\n        // injection won!\n        return injectionResult;\n    }\n    return matchResult;\n}\nfunction matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    const rule = stack.getRule(grammar);\n    const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition);\n    const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (r) {\n        return {\n            captureIndices: r.captureIndices,\n            matchedRuleId: r.ruleId\n        };\n    }\n    return null;\n}\nfunction matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // The lower the better\n    let bestMatchRating = Number.MAX_VALUE;\n    let bestMatchCaptureIndices = null;\n    let bestMatchRuleId;\n    let bestMatchResultPriority = 0;\n    const scopes = stack.contentNameScopesList.getScopeNames();\n    for (let i = 0, len = injections.length; i < len; i++) {\n        const injection = injections[i];\n        if (!injection.matcher(scopes)) {\n            // injection selector doesn't match stack\n            continue;\n        }\n        const rule = grammar.getRule(injection.ruleId);\n        const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition);\n        const matchResult = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (!matchResult) {\n            continue;\n        }\n        const matchRating = matchResult.captureIndices[0].start;\n        if (matchRating >= bestMatchRating) {\n            // Injections are sorted by priority, so the previous injection had a better or equal priority\n            continue;\n        }\n        bestMatchRating = matchRating;\n        bestMatchCaptureIndices = matchResult.captureIndices;\n        bestMatchRuleId = matchResult.ruleId;\n        bestMatchResultPriority = injection.priority;\n        if (bestMatchRating === linePos) {\n            // No more need to look at the rest of the injections.\n            break;\n        }\n    }\n    if (bestMatchCaptureIndices) {\n        return {\n            priorityMatch: bestMatchResultPriority === -1,\n            captureIndices: bestMatchCaptureIndices,\n            matchedRuleId: bestMatchRuleId\n        };\n    }\n    return null;\n}\nfunction prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    const ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner, findOptions: 0 /* FindOption.None */ };\n}\nfunction prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    const ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner, findOptions: 0 /* FindOption.None */ };\n}\nfunction handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {\n    if (captures.length === 0) {\n        return;\n    }\n    const lineTextContent = lineText.content;\n    const len = Math.min(captures.length, captureIndices.length);\n    const localStack = [];\n    const maxEnd = captureIndices[0].end;\n    for (let i = 0; i < len; i++) {\n        const captureRule = captures[i];\n        if (captureRule === null) {\n            // Not interested\n            continue;\n        }\n        const captureIndex = captureIndices[i];\n        if (captureIndex.length === 0) {\n            // Nothing really captured\n            continue;\n        }\n        if (captureIndex.start > maxEnd) {\n            // Capture going beyond consumed string\n            break;\n        }\n        // pop captures while needed\n        while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {\n            // pop!\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n            localStack.pop();\n        }\n        if (localStack.length > 0) {\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);\n        }\n        else {\n            lineTokens.produce(stack, captureIndex.start);\n        }\n        if (captureRule.retokenizeCapturedWithRuleId) {\n            // the capture requires additional matching\n            const scopeName = captureRule.getName(lineTextContent, captureIndices);\n            const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n            const contentName = captureRule.getContentName(lineTextContent, captureIndices);\n            const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n            const stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);\n            const onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));\n            _tokenizeString(grammar, onigSubStr, (isFirstLine && captureIndex.start === 0), captureIndex.start, stackClone, lineTokens, false, /* no time limit */ 0);\n            disposeOnigString(onigSubStr);\n            continue;\n        }\n        const captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);\n        if (captureRuleScopeName !== null) {\n            // push\n            const base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;\n            const captureRuleScopesList = base.pushAttributed(captureRuleScopeName, grammar);\n            localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));\n        }\n    }\n    while (localStack.length > 0) {\n        // pop!\n        lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n        localStack.pop();\n    }\n}\nclass LocalStackElement {\n    scopes;\n    endPos;\n    constructor(scopes, endPos) {\n        this.scopes = scopes;\n        this.endPos = endPos;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nfunction createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib) {\n    return new Grammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib); //TODO\n}\nfunction collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {\n    const matchers = createMatchers(selector, nameMatcher);\n    const ruleId = RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);\n    for (const matcher of matchers) {\n        result.push({\n            debugSelector: selector,\n            matcher: matcher.matcher,\n            ruleId: ruleId,\n            grammar: grammar,\n            priority: matcher.priority\n        });\n    }\n}\nfunction nameMatcher(identifers, scopes) {\n    if (scopes.length < identifers.length) {\n        return false;\n    }\n    let lastIndex = 0;\n    return identifers.every(identifier => {\n        for (let i = lastIndex; i < scopes.length; i++) {\n            if (scopesAreMatching(scopes[i], identifier)) {\n                lastIndex = i + 1;\n                return true;\n            }\n        }\n        return false;\n    });\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nclass Grammar {\n    _rootScopeName;\n    balancedBracketSelectors;\n    _onigLib;\n    _rootId;\n    _lastRuleId;\n    _ruleId2desc;\n    _includedGrammars;\n    _grammarRepository;\n    _grammar;\n    _injections;\n    _basicScopeAttributesProvider;\n    _tokenTypeMatchers;\n    get themeProvider() { return this._grammarRepository; }\n    constructor(_rootScopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, _onigLib) {\n        this._rootScopeName = _rootScopeName;\n        this.balancedBracketSelectors = balancedBracketSelectors;\n        this._onigLib = _onigLib;\n        this._basicScopeAttributesProvider = new BasicScopeAttributesProvider(initialLanguage, embeddedLanguages);\n        this._rootId = -1;\n        this._lastRuleId = 0;\n        this._ruleId2desc = [null];\n        this._includedGrammars = {};\n        this._grammarRepository = grammarRepository;\n        this._grammar = initGrammar(grammar, null);\n        this._injections = null;\n        this._tokenTypeMatchers = [];\n        if (tokenTypes) {\n            for (const selector of Object.keys(tokenTypes)) {\n                const matchers = createMatchers(selector, nameMatcher);\n                for (const matcher of matchers) {\n                    this._tokenTypeMatchers.push({\n                        matcher: matcher.matcher,\n                        type: tokenTypes[selector],\n                    });\n                }\n            }\n        }\n    }\n    dispose() {\n        for (const rule of this._ruleId2desc) {\n            if (rule) {\n                rule.dispose();\n            }\n        }\n    }\n    createOnigScanner(sources) {\n        return this._onigLib.createOnigScanner(sources);\n    }\n    createOnigString(sources) {\n        return this._onigLib.createOnigString(sources);\n    }\n    getMetadataForScope(scope) {\n        return this._basicScopeAttributesProvider.getBasicScopeAttributes(scope);\n    }\n    _collectInjections() {\n        const grammarRepository = {\n            lookup: (scopeName) => {\n                if (scopeName === this._rootScopeName) {\n                    return this._grammar;\n                }\n                return this.getExternalGrammar(scopeName);\n            },\n            injections: (scopeName) => {\n                return this._grammarRepository.injections(scopeName);\n            },\n        };\n        const result = [];\n        const scopeName = this._rootScopeName;\n        const grammar = grammarRepository.lookup(scopeName);\n        if (grammar) {\n            // add injections from the current grammar\n            const rawInjections = grammar.injections;\n            if (rawInjections) {\n                for (let expression in rawInjections) {\n                    collectInjections(result, expression, rawInjections[expression], this, grammar);\n                }\n            }\n            // add injection grammars contributed for the current scope\n            const injectionScopeNames = this._grammarRepository.injections(scopeName);\n            if (injectionScopeNames) {\n                injectionScopeNames.forEach((injectionScopeName) => {\n                    const injectionGrammar = this.getExternalGrammar(injectionScopeName);\n                    if (injectionGrammar) {\n                        const selector = injectionGrammar.injectionSelector;\n                        if (selector) {\n                            collectInjections(result, selector, injectionGrammar, this, injectionGrammar);\n                        }\n                    }\n                });\n            }\n        }\n        result.sort((i1, i2) => i1.priority - i2.priority); // sort by priority\n        return result;\n    }\n    getInjections() {\n        if (this._injections === null) {\n            this._injections = this._collectInjections();\n        }\n        return this._injections;\n    }\n    registerRule(factory) {\n        const id = ++this._lastRuleId;\n        const result = factory(ruleIdFromNumber(id));\n        this._ruleId2desc[id] = result;\n        return result;\n    }\n    getRule(ruleId) {\n        return this._ruleId2desc[ruleIdToNumber(ruleId)];\n    }\n    getExternalGrammar(scopeName, repository) {\n        if (this._includedGrammars[scopeName]) {\n            return this._includedGrammars[scopeName];\n        }\n        else if (this._grammarRepository) {\n            const rawIncludedGrammar = this._grammarRepository.lookup(scopeName);\n            if (rawIncludedGrammar) {\n                // console.log('LOADED GRAMMAR ' + pattern.include);\n                this._includedGrammars[scopeName] = initGrammar(rawIncludedGrammar, repository && repository.$base);\n                return this._includedGrammars[scopeName];\n            }\n        }\n        return undefined;\n    }\n    tokenizeLine(lineText, prevState, timeLimit = 0) {\n        const r = this._tokenize(lineText, prevState, false, timeLimit);\n        return {\n            tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n    tokenizeLine2(lineText, prevState, timeLimit = 0) {\n        const r = this._tokenize(lineText, prevState, true, timeLimit);\n        return {\n            tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n    _tokenize(lineText, prevState, emitBinaryTokens, timeLimit) {\n        if (this._rootId === -1) {\n            this._rootId = RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository);\n            // This ensures ids are deterministic, and thus equal in renderer and webworker.\n            this.getInjections();\n        }\n        let isFirstLine;\n        if (!prevState || prevState === StateStackImpl.NULL) {\n            isFirstLine = true;\n            const rawDefaultMetadata = this._basicScopeAttributesProvider.getDefaultAttributes();\n            const defaultStyle = this.themeProvider.getDefaults();\n            const defaultMetadata = EncodedTokenAttributes.set(0, rawDefaultMetadata.languageId, rawDefaultMetadata.tokenType, null, defaultStyle.fontStyle, defaultStyle.foregroundId, defaultStyle.backgroundId);\n            const rootScopeName = this.getRule(this._rootId).getName(null, null);\n            let scopeList;\n            if (rootScopeName) {\n                scopeList = AttributedScopeStack.createRootAndLookUpScopeName(rootScopeName, defaultMetadata, this);\n            }\n            else {\n                scopeList = AttributedScopeStack.createRoot(\"unknown\", defaultMetadata);\n            }\n            prevState = new StateStackImpl(null, this._rootId, -1, -1, false, null, scopeList, scopeList);\n        }\n        else {\n            isFirstLine = false;\n            prevState.reset();\n        }\n        lineText = lineText + \"\\n\";\n        const onigLineText = this.createOnigString(lineText);\n        const lineLength = onigLineText.content.length;\n        const lineTokens = new LineTokens(emitBinaryTokens, lineText, this._tokenTypeMatchers, this.balancedBracketSelectors);\n        const r = _tokenizeString(this, onigLineText, isFirstLine, 0, prevState, lineTokens, true, timeLimit);\n        disposeOnigString(onigLineText);\n        return {\n            lineLength: lineLength,\n            lineTokens: lineTokens,\n            ruleStack: r.stack,\n            stoppedEarly: r.stoppedEarly,\n        };\n    }\n}\nfunction initGrammar(grammar, base) {\n    grammar = clone(grammar);\n    grammar.repository = grammar.repository || {};\n    grammar.repository.$self = {\n        $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,\n        patterns: grammar.patterns,\n        name: grammar.scopeName\n    };\n    grammar.repository.$base = base || grammar.repository.$self;\n    return grammar;\n}\nclass AttributedScopeStack {\n    parent;\n    scopePath;\n    tokenAttributes;\n    static fromExtension(namesScopeList, contentNameScopesList) {\n        let current = namesScopeList;\n        let scopeNames = namesScopeList?.scopePath ?? null;\n        for (const frame of contentNameScopesList) {\n            scopeNames = ScopeStack.push(scopeNames, frame.scopeNames);\n            current = new AttributedScopeStack(current, scopeNames, frame.encodedTokenAttributes);\n        }\n        return current;\n    }\n    static createRoot(scopeName, tokenAttributes) {\n        return new AttributedScopeStack(null, new ScopeStack(null, scopeName), tokenAttributes);\n    }\n    static createRootAndLookUpScopeName(scopeName, tokenAttributes, grammar) {\n        const rawRootMetadata = grammar.getMetadataForScope(scopeName);\n        const scopePath = new ScopeStack(null, scopeName);\n        const rootStyle = grammar.themeProvider.themeMatch(scopePath);\n        const resolvedTokenAttributes = AttributedScopeStack.mergeAttributes(tokenAttributes, rawRootMetadata, rootStyle);\n        return new AttributedScopeStack(null, scopePath, resolvedTokenAttributes);\n    }\n    get scopeName() { return this.scopePath.scopeName; }\n    /**\n     * Invariant:\n     * ```\n     * if (parent && !scopePath.extends(parent.scopePath)) {\n     * \tthrow new Error();\n     * }\n     * ```\n     */\n    constructor(parent, scopePath, tokenAttributes) {\n        this.parent = parent;\n        this.scopePath = scopePath;\n        this.tokenAttributes = tokenAttributes;\n    }\n    toString() {\n        return this.getScopeNames().join(' ');\n    }\n    equals(other) {\n        return AttributedScopeStack.equals(this, other);\n    }\n    static equals(a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.scopeName !== b.scopeName || a.tokenAttributes !== b.tokenAttributes) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    }\n    static mergeAttributes(existingTokenAttributes, basicScopeAttributes, styleAttributes) {\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        let foreground = 0;\n        let background = 0;\n        if (styleAttributes !== null) {\n            fontStyle = styleAttributes.fontStyle;\n            foreground = styleAttributes.foregroundId;\n            background = styleAttributes.backgroundId;\n        }\n        return EncodedTokenAttributes.set(existingTokenAttributes, basicScopeAttributes.languageId, basicScopeAttributes.tokenType, null, fontStyle, foreground, background);\n    }\n    pushAttributed(scopePath, grammar) {\n        if (scopePath === null) {\n            return this;\n        }\n        if (scopePath.indexOf(' ') === -1) {\n            // This is the common case and much faster\n            return AttributedScopeStack._pushAttributed(this, scopePath, grammar);\n        }\n        const scopes = scopePath.split(/ /g);\n        let result = this;\n        for (const scope of scopes) {\n            result = AttributedScopeStack._pushAttributed(result, scope, grammar);\n        }\n        return result;\n    }\n    static _pushAttributed(target, scopeName, grammar) {\n        const rawMetadata = grammar.getMetadataForScope(scopeName);\n        const newPath = target.scopePath.push(scopeName);\n        const scopeThemeMatchResult = grammar.themeProvider.themeMatch(newPath);\n        const metadata = AttributedScopeStack.mergeAttributes(target.tokenAttributes, rawMetadata, scopeThemeMatchResult);\n        return new AttributedScopeStack(target, newPath, metadata);\n    }\n    getScopeNames() {\n        return this.scopePath.getSegments();\n    }\n    getExtensionIfDefined(base) {\n        const result = [];\n        let self = this;\n        while (self && self !== base) {\n            result.push({\n                encodedTokenAttributes: self.tokenAttributes,\n                scopeNames: self.scopePath.getExtensionIfDefined(self.parent?.scopePath ?? null),\n            });\n            self = self.parent;\n        }\n        return self === base ? result.reverse() : undefined;\n    }\n}\n/**\n * Represents a \"pushed\" state on the stack (as a linked list element).\n */\nclass StateStackImpl {\n    parent;\n    ruleId;\n    beginRuleCapturedEOL;\n    endRule;\n    nameScopesList;\n    contentNameScopesList;\n    _stackElementBrand = undefined;\n    // TODO remove me\n    static NULL = new StateStackImpl(null, 0, 0, 0, false, null, null, null);\n    /**\n     * The position on the current line where this state was pushed.\n     * This is relevant only while tokenizing a line, to detect endless loops.\n     * Its value is meaningless across lines.\n     */\n    _enterPos;\n    /**\n     * The captured anchor position when this stack element was pushed.\n     * This is relevant only while tokenizing a line, to restore the anchor position when popping.\n     * Its value is meaningless across lines.\n     */\n    _anchorPos;\n    /**\n     * The depth of the stack.\n     */\n    depth;\n    /**\n     * Invariant:\n     * ```\n     * if (contentNameScopesList !== nameScopesList && contentNameScopesList?.parent !== nameScopesList) {\n     * \tthrow new Error();\n     * }\n     * if (this.parent && !nameScopesList.extends(this.parent.contentNameScopesList)) {\n     * \tthrow new Error();\n     * }\n     * ```\n     */\n    constructor(\n    /**\n     * The previous state on the stack (or null for the root state).\n     */\n    parent, \n    /**\n     * The state (rule) that this element represents.\n     */\n    ruleId, enterPos, anchorPos, \n    /**\n     * The state has entered and captured \\n. This means that the next line should have an anchorPosition of 0.\n     */\n    beginRuleCapturedEOL, \n    /**\n     * The \"pop\" (end) condition for this state in case that it was dynamically generated through captured text.\n     */\n    endRule, \n    /**\n     * The list of scopes containing the \"name\" for this state.\n     */\n    nameScopesList, \n    /**\n     * The list of scopes containing the \"contentName\" (besides \"name\") for this state.\n     * This list **must** contain as an element `scopeName`.\n     */\n    contentNameScopesList) {\n        this.parent = parent;\n        this.ruleId = ruleId;\n        this.beginRuleCapturedEOL = beginRuleCapturedEOL;\n        this.endRule = endRule;\n        this.nameScopesList = nameScopesList;\n        this.contentNameScopesList = contentNameScopesList;\n        this.depth = this.parent ? this.parent.depth + 1 : 1;\n        this._enterPos = enterPos;\n        this._anchorPos = anchorPos;\n    }\n    equals(other) {\n        if (other === null) {\n            return false;\n        }\n        return StateStackImpl._equals(this, other);\n    }\n    static _equals(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!this._structuralEquals(a, b)) {\n            return false;\n        }\n        return AttributedScopeStack.equals(a.contentNameScopesList, b.contentNameScopesList);\n    }\n    /**\n     * A structural equals check. Does not take into account `scopes`.\n     */\n    static _structuralEquals(a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.depth !== b.depth ||\n                a.ruleId !== b.ruleId ||\n                a.endRule !== b.endRule) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    }\n    clone() {\n        return this;\n    }\n    static _reset(el) {\n        while (el) {\n            el._enterPos = -1;\n            el._anchorPos = -1;\n            el = el.parent;\n        }\n    }\n    reset() {\n        StateStackImpl._reset(this);\n    }\n    pop() {\n        return this.parent;\n    }\n    safePop() {\n        if (this.parent) {\n            return this.parent;\n        }\n        return this;\n    }\n    push(ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n        return new StateStackImpl(this, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList);\n    }\n    getEnterPos() {\n        return this._enterPos;\n    }\n    getAnchorPos() {\n        return this._anchorPos;\n    }\n    getRule(grammar) {\n        return grammar.getRule(this.ruleId);\n    }\n    toString() {\n        const r = [];\n        this._writeString(r, 0);\n        return \"[\" + r.join(\",\") + \"]\";\n    }\n    _writeString(res, outIndex) {\n        if (this.parent) {\n            outIndex = this.parent._writeString(res, outIndex);\n        }\n        res[outIndex++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`;\n        return outIndex;\n    }\n    withContentNameScopesList(contentNameScopeStack) {\n        if (this.contentNameScopesList === contentNameScopeStack) {\n            return this;\n        }\n        return this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, contentNameScopeStack);\n    }\n    withEndRule(endRule) {\n        if (this.endRule === endRule) {\n            return this;\n        }\n        return new StateStackImpl(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, endRule, this.nameScopesList, this.contentNameScopesList);\n    }\n    // Used to warn of endless loops\n    hasSameRuleAs(other) {\n        let el = this;\n        while (el && el._enterPos === other._enterPos) {\n            if (el.ruleId === other.ruleId) {\n                return true;\n            }\n            el = el.parent;\n        }\n        return false;\n    }\n    toStateStackFrame() {\n        return {\n            ruleId: ruleIdToNumber(this.ruleId),\n            beginRuleCapturedEOL: this.beginRuleCapturedEOL,\n            endRule: this.endRule,\n            nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [],\n            contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? [],\n        };\n    }\n    static pushFrame(self, frame) {\n        const namesScopeList = AttributedScopeStack.fromExtension(self?.nameScopesList ?? null, frame.nameScopesList);\n        return new StateStackImpl(self, ruleIdFromNumber(frame.ruleId), frame.enterPos ?? -1, frame.anchorPos ?? -1, frame.beginRuleCapturedEOL, frame.endRule, namesScopeList, AttributedScopeStack.fromExtension(namesScopeList, frame.contentNameScopesList));\n    }\n}\nclass BalancedBracketSelectors {\n    balancedBracketScopes;\n    unbalancedBracketScopes;\n    allowAny = false;\n    constructor(balancedBracketScopes, unbalancedBracketScopes) {\n        this.balancedBracketScopes = balancedBracketScopes.flatMap((selector) => {\n            if (selector === '*') {\n                this.allowAny = true;\n                return [];\n            }\n            return createMatchers(selector, nameMatcher).map((m) => m.matcher);\n        });\n        this.unbalancedBracketScopes = unbalancedBracketScopes.flatMap((selector) => createMatchers(selector, nameMatcher).map((m) => m.matcher));\n    }\n    get matchesAlways() {\n        return this.allowAny && this.unbalancedBracketScopes.length === 0;\n    }\n    get matchesNever() {\n        return this.balancedBracketScopes.length === 0 && !this.allowAny;\n    }\n    match(scopes) {\n        for (const excluder of this.unbalancedBracketScopes) {\n            if (excluder(scopes)) {\n                return false;\n            }\n        }\n        for (const includer of this.balancedBracketScopes) {\n            if (includer(scopes)) {\n                return true;\n            }\n        }\n        return this.allowAny;\n    }\n}\nclass LineTokens {\n    balancedBracketSelectors;\n    _emitBinaryTokens;\n    /**\n     * defined only if `false`.\n     */\n    _lineText;\n    /**\n     * used only if `_emitBinaryTokens` is false.\n     */\n    _tokens;\n    /**\n     * used only if `_emitBinaryTokens` is true.\n     */\n    _binaryTokens;\n    _lastTokenEndIndex;\n    _tokenTypeOverrides;\n    constructor(emitBinaryTokens, lineText, tokenTypeOverrides, balancedBracketSelectors) {\n        this.balancedBracketSelectors = balancedBracketSelectors;\n        this._emitBinaryTokens = emitBinaryTokens;\n        this._tokenTypeOverrides = tokenTypeOverrides;\n        {\n            this._lineText = null;\n        }\n        this._tokens = [];\n        this._binaryTokens = [];\n        this._lastTokenEndIndex = 0;\n    }\n    produce(stack, endIndex) {\n        this.produceFromScopes(stack.contentNameScopesList, endIndex);\n    }\n    produceFromScopes(scopesList, endIndex) {\n        if (this._lastTokenEndIndex >= endIndex) {\n            return;\n        }\n        if (this._emitBinaryTokens) {\n            let metadata = scopesList?.tokenAttributes ?? 0;\n            let containsBalancedBrackets = false;\n            if (this.balancedBracketSelectors?.matchesAlways) {\n                containsBalancedBrackets = true;\n            }\n            if (this._tokenTypeOverrides.length > 0 || (this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever)) {\n                // Only generate scope array when required to improve performance\n                const scopes = scopesList?.getScopeNames() ?? [];\n                for (const tokenType of this._tokenTypeOverrides) {\n                    if (tokenType.matcher(scopes)) {\n                        metadata = EncodedTokenAttributes.set(metadata, 0, toOptionalTokenType(tokenType.type), null, -1 /* FontStyle.NotSet */, 0, 0);\n                    }\n                }\n                if (this.balancedBracketSelectors) {\n                    containsBalancedBrackets = this.balancedBracketSelectors.match(scopes);\n                }\n            }\n            if (containsBalancedBrackets) {\n                metadata = EncodedTokenAttributes.set(metadata, 0, 8 /* OptionalStandardTokenType.NotSet */, containsBalancedBrackets, -1 /* FontStyle.NotSet */, 0, 0);\n            }\n            if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {\n                // no need to push a token with the same metadata\n                this._lastTokenEndIndex = endIndex;\n                return;\n            }\n            this._binaryTokens.push(this._lastTokenEndIndex);\n            this._binaryTokens.push(metadata);\n            this._lastTokenEndIndex = endIndex;\n            return;\n        }\n        const scopes = scopesList?.getScopeNames() ?? [];\n        this._tokens.push({\n            startIndex: this._lastTokenEndIndex,\n            endIndex: endIndex,\n            // value: lineText.substring(lastTokenEndIndex, endIndex),\n            scopes: scopes\n        });\n        this._lastTokenEndIndex = endIndex;\n    }\n    getResult(stack, lineLength) {\n        if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {\n            // pop produced token for newline\n            this._tokens.pop();\n        }\n        if (this._tokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._tokens[this._tokens.length - 1].startIndex = 0;\n        }\n        return this._tokens;\n    }\n    getBinaryResult(stack, lineLength) {\n        if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {\n            // pop produced token for newline\n            this._binaryTokens.pop();\n            this._binaryTokens.pop();\n        }\n        if (this._binaryTokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._binaryTokens[this._binaryTokens.length - 2] = 0;\n        }\n        const result = new Uint32Array(this._binaryTokens.length);\n        for (let i = 0, len = this._binaryTokens.length; i < len; i++) {\n            result[i] = this._binaryTokens[i];\n        }\n        return result;\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nclass SyncRegistry {\n    _onigLibPromise;\n    _grammars = new Map();\n    _rawGrammars = new Map();\n    _injectionGrammars = new Map();\n    _theme;\n    constructor(theme, _onigLibPromise) {\n        this._onigLibPromise = _onigLibPromise;\n        this._theme = theme;\n    }\n    dispose() {\n        for (const grammar of this._grammars.values()) {\n            grammar.dispose();\n        }\n    }\n    setTheme(theme) {\n        this._theme = theme;\n    }\n    getColorMap() {\n        return this._theme.getColorMap();\n    }\n    /**\n     * Add `grammar` to registry and return a list of referenced scope names\n     */\n    addGrammar(grammar, injectionScopeNames) {\n        this._rawGrammars.set(grammar.scopeName, grammar);\n        if (injectionScopeNames) {\n            this._injectionGrammars.set(grammar.scopeName, injectionScopeNames);\n        }\n    }\n    /**\n     * Lookup a raw grammar.\n     */\n    lookup(scopeName) {\n        return this._rawGrammars.get(scopeName);\n    }\n    /**\n     * Returns the injections for the given grammar\n     */\n    injections(targetScope) {\n        return this._injectionGrammars.get(targetScope);\n    }\n    /**\n     * Get the default theme settings\n     */\n    getDefaults() {\n        return this._theme.getDefaults();\n    }\n    /**\n     * Match a scope in the theme.\n     */\n    themeMatch(scopePath) {\n        return this._theme.match(scopePath);\n    }\n    /**\n     * Lookup a grammar.\n     */\n    async grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n        if (!this._grammars.has(scopeName)) {\n            let rawGrammar = this._rawGrammars.get(scopeName);\n            if (!rawGrammar) {\n                return null;\n            }\n            this._grammars.set(scopeName, createGrammar(scopeName, rawGrammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, this, await this._onigLibPromise));\n        }\n        return this._grammars.get(scopeName);\n    }\n}\n\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n/**\n * The registry that will hold all grammars.\n */\nlet Registry$1 = class Registry {\n    _options;\n    _syncRegistry;\n    _ensureGrammarCache;\n    constructor(options) {\n        this._options = options;\n        this._syncRegistry = new SyncRegistry(Theme.createFromRawTheme(options.theme, options.colorMap), options.onigLib);\n        this._ensureGrammarCache = new Map();\n    }\n    dispose() {\n        this._syncRegistry.dispose();\n    }\n    /**\n     * Change the theme. Once called, no previous `ruleStack` should be used anymore.\n     */\n    setTheme(theme, colorMap) {\n        this._syncRegistry.setTheme(Theme.createFromRawTheme(theme, colorMap));\n    }\n    /**\n     * Returns a lookup array for color ids.\n     */\n    getColorMap() {\n        return this._syncRegistry.getColorMap();\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    loadGrammarWithEmbeddedLanguages(initialScopeName, initialLanguage, embeddedLanguages) {\n        return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages });\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    loadGrammarWithConfiguration(initialScopeName, initialLanguage, configuration) {\n        return this._loadGrammar(initialScopeName, initialLanguage, configuration.embeddedLanguages, configuration.tokenTypes, new BalancedBracketSelectors(configuration.balancedBracketSelectors || [], configuration.unbalancedBracketSelectors || []));\n    }\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     */\n    loadGrammar(initialScopeName) {\n        return this._loadGrammar(initialScopeName, 0, null, null, null);\n    }\n    async _loadGrammar(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n        const dependencyProcessor = new ScopeDependencyProcessor(this._syncRegistry, initialScopeName);\n        while (dependencyProcessor.Q.length > 0) {\n            await Promise.all(dependencyProcessor.Q.map((request) => this._loadSingleGrammar(request.scopeName)));\n            dependencyProcessor.processQueue();\n        }\n        return this._grammarForScopeName(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors);\n    }\n    async _loadSingleGrammar(scopeName) {\n        if (!this._ensureGrammarCache.has(scopeName)) {\n            this._ensureGrammarCache.set(scopeName, this._doLoadSingleGrammar(scopeName));\n        }\n        return this._ensureGrammarCache.get(scopeName);\n    }\n    async _doLoadSingleGrammar(scopeName) {\n        const grammar = await this._options.loadGrammar(scopeName);\n        if (grammar) {\n            const injections = typeof this._options.getInjections === \"function\" ? this._options.getInjections(scopeName) : undefined;\n            this._syncRegistry.addGrammar(grammar, injections);\n        }\n    }\n    /**\n     * Adds a rawGrammar.\n     */\n    async addGrammar(rawGrammar, injections = [], initialLanguage = 0, embeddedLanguages = null) {\n        this._syncRegistry.addGrammar(rawGrammar, injections);\n        return (await this._grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages));\n    }\n    /**\n     * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.\n     */\n    _grammarForScopeName(scopeName, initialLanguage = 0, embeddedLanguages = null, tokenTypes = null, balancedBracketSelectors = null) {\n        return this._syncRegistry.grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors);\n    }\n};\nconst INITIAL = StateStackImpl.NULL;\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n */\nconst MetadataConsts = {\n    LANGUAGEID_MASK: 0b00000000000000000000000011111111,\n    TOKEN_TYPE_MASK: 0b00000000000000000000001100000000,\n    BALANCED_BRACKETS_MASK: 0b00000000000000000000010000000000,\n    FONT_STYLE_MASK: 0b00000000000000000011100000000000,\n    FOREGROUND_MASK: 0b00000000011111111100000000000000,\n    BACKGROUND_MASK: 0b11111111100000000000000000000000,\n    LANGUAGEID_OFFSET: 0,\n    TOKEN_TYPE_OFFSET: 8,\n    BALANCED_BRACKETS_OFFSET: 10,\n    FONT_STYLE_OFFSET: 11,\n    FOREGROUND_OFFSET: 15,\n    BACKGROUND_OFFSET: 24,\n};\nclass StackElementMetadata {\n    static toBinaryStr(metadata) {\n        let r = metadata.toString(2);\n        while (r.length < 32)\n            r = `0${r}`;\n        return r;\n    }\n    // public static printMetadata(metadata: number): void {\n    //   const languageId = StackElementMetadata.getLanguageId(metadata)\n    //   const tokenType = StackElementMetadata.getTokenType(metadata)\n    //   const fontStyle = StackElementMetadata.getFontStyle(metadata)\n    //   const foreground = StackElementMetadata.getForeground(metadata)\n    //   const background = StackElementMetadata.getBackground(metadata)\n    //   console.log({\n    //     languageId,\n    //     tokenType,\n    //     fontStyle,\n    //     foreground,\n    //     background,\n    //   })\n    // }\n    static getLanguageId(metadata) {\n        return (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n    }\n    static getTokenType(metadata) {\n        return (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n    }\n    static getForeground(metadata) {\n        return (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n    }\n    static getBackground(metadata) {\n        return (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n    }\n    static set(metadata, languageId, tokenType, fontStyle, foreground, background) {\n        let _languageId = StackElementMetadata.getLanguageId(metadata);\n        let _tokenType = StackElementMetadata.getTokenType(metadata);\n        let _fontStyle = StackElementMetadata.getFontStyle(metadata);\n        let _foreground = StackElementMetadata.getForeground(metadata);\n        let _background = StackElementMetadata.getBackground(metadata);\n        const _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(metadata)\n            ? 1\n            : 0;\n        if (languageId !== 0)\n            _languageId = languageId;\n        if (tokenType !== 0 /* TemporaryStandardTokenType.Other */) {\n            _tokenType\n                = tokenType === 8 /* TemporaryStandardTokenType.MetaEmbedded */ ? 0 /* StandardTokenType.Other */ : tokenType;\n        }\n        if (fontStyle !== _types_mjs__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NotSet)\n            _fontStyle = fontStyle;\n        if (foreground !== 0)\n            _foreground = foreground;\n        if (background !== 0)\n            _background = background;\n        return (((_languageId << MetadataConsts.LANGUAGEID_OFFSET)\n            | (_tokenType << MetadataConsts.TOKEN_TYPE_OFFSET)\n            | (_fontStyle << MetadataConsts.FONT_STYLE_OFFSET)\n            | (_containsBalancedBracketsBit << MetadataConsts.BALANCED_BRACKETS_OFFSET)\n            | (_foreground << MetadataConsts.FOREGROUND_OFFSET)\n            | (_background << MetadataConsts.BACKGROUND_OFFSET))\n            >>> 0);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/textmate.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/types.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/types.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* binding */ FontStyle)\n/* harmony export */ });\nvar FontStyle;\n(function (FontStyle) {\n    FontStyle[FontStyle[\"NotSet\"] = -1] = \"NotSet\";\n    FontStyle[FontStyle[\"None\"] = 0] = \"None\";\n    FontStyle[FontStyle[\"Italic\"] = 1] = \"Italic\";\n    FontStyle[FontStyle[\"Bold\"] = 2] = \"Bold\";\n    FontStyle[FontStyle[\"Underline\"] = 4] = \"Underline\";\n})(FontStyle || (FontStyle = {}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraWppLWNvcmVAMC4xMC4yL25vZGVfbW9kdWxlcy9zaGlraWppLWNvcmUvZGlzdC90eXBlcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEI7O0FBRVYiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hY2JveGxpdS9wcm9qZWN0cy9iaWpvbi9lY2hvYWkvbm9kZV9tb2R1bGVzLy5wbnBtL3NoaWtpamktY29yZUAwLjEwLjIvbm9kZV9tb2R1bGVzL3NoaWtpamktY29yZS9kaXN0L3R5cGVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRm9udFN0eWxlO1xuKGZ1bmN0aW9uIChGb250U3R5bGUpIHtcbiAgICBGb250U3R5bGVbRm9udFN0eWxlW1wiTm90U2V0XCJdID0gLTFdID0gXCJOb3RTZXRcIjtcbiAgICBGb250U3R5bGVbRm9udFN0eWxlW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgRm9udFN0eWxlW0ZvbnRTdHlsZVtcIkl0YWxpY1wiXSA9IDFdID0gXCJJdGFsaWNcIjtcbiAgICBGb250U3R5bGVbRm9udFN0eWxlW1wiQm9sZFwiXSA9IDJdID0gXCJCb2xkXCI7XG4gICAgRm9udFN0eWxlW0ZvbnRTdHlsZVtcIlVuZGVybGluZVwiXSA9IDRdID0gXCJVbmRlcmxpbmVcIjtcbn0pKEZvbnRTdHlsZSB8fCAoRm9udFN0eWxlID0ge30pKTtcblxuZXhwb3J0IHsgRm9udFN0eWxlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/types.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/wasm-inlined.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/wasm-inlined.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getWasm)\n/* harmony export */ });\nconst getWasm = async (info) => {\n    // @ts-expect-error this will be compiled to ArrayBuffer\n    const binray = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji-core_0_10_2_node_modules_shikiji-core_dist_onig_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./onig.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/onig.mjs\")).then(m => m.default);\n    return WebAssembly.instantiate(binray, info).then(wasm => wasm.instance.exports);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraWppLWNvcmVAMC4xMC4yL25vZGVfbW9kdWxlcy9zaGlraWppLWNvcmUvZGlzdC93YXNtLWlubGluZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EseUJBQXlCLHVUQUFvQjtBQUM3QztBQUNBOztBQUU4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2FjYm94bGl1L3Byb2plY3RzL2Jpam9uL2VjaG9haS9ub2RlX21vZHVsZXMvLnBucG0vc2hpa2lqaS1jb3JlQDAuMTAuMi9ub2RlX21vZHVsZXMvc2hpa2lqaS1jb3JlL2Rpc3Qvd2FzbS1pbmxpbmVkLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRXYXNtID0gYXN5bmMgKGluZm8pID0+IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgd2lsbCBiZSBjb21waWxlZCB0byBBcnJheUJ1ZmZlclxuICAgIGNvbnN0IGJpbnJheSA9IGF3YWl0IGltcG9ydCgnLi9vbmlnLm1qcycpLnRoZW4obSA9PiBtLmRlZmF1bHQpO1xuICAgIHJldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5yYXksIGluZm8pLnRoZW4od2FzbSA9PiB3YXNtLmluc3RhbmNlLmV4cG9ydHMpO1xufTtcblxuZXhwb3J0IHsgZ2V0V2FzbSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/wasm-inlined.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/bundle-full.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/bundle-full.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.FontStyle),\n/* harmony export */   addClassToHast: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.addClassToHast),\n/* harmony export */   applyColorReplacements: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.applyColorReplacements),\n/* harmony export */   bundledLanguages: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguages),\n/* harmony export */   bundledLanguagesAlias: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesAlias),\n/* harmony export */   bundledLanguagesBase: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesBase),\n/* harmony export */   bundledLanguagesInfo: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesInfo),\n/* harmony export */   bundledThemes: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemes),\n/* harmony export */   bundledThemesInfo: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemesInfo),\n/* harmony export */   codeToHast: () => (/* binding */ codeToHast),\n/* harmony export */   codeToHtml: () => (/* binding */ codeToHtml),\n/* harmony export */   codeToThemedTokens: () => (/* binding */ codeToThemedTokens),\n/* harmony export */   codeToTokensWithThemes: () => (/* binding */ codeToTokensWithThemes),\n/* harmony export */   createSingletonShorthands: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.createSingletonShorthands),\n/* harmony export */   createdBundledHighlighter: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.createdBundledHighlighter),\n/* harmony export */   getHighlighter: () => (/* binding */ getHighlighter),\n/* harmony export */   getHighlighterCore: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.getHighlighterCore),\n/* harmony export */   getShikiInternal: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.getShikiInternal),\n/* harmony export */   getSingletonHighlighter: () => (/* binding */ getSingletonHighlighter),\n/* harmony export */   getWasmInlined: () => (/* reexport safe */ shikiji_wasm__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   hastToHtml: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.hastToHtml),\n/* harmony export */   isNoneTheme: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.isNoneTheme),\n/* harmony export */   isPlainLang: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.isPlainLang),\n/* harmony export */   isPlaintext: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.isPlaintext),\n/* harmony export */   isSpecialLang: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.isSpecialLang),\n/* harmony export */   isSpecialTheme: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.isSpecialTheme),\n/* harmony export */   loadWasm: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.loadWasm),\n/* harmony export */   normalizeTheme: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.normalizeTheme),\n/* harmony export */   setDefaultWasmLoader: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.setDefaultWasmLoader),\n/* harmony export */   splitLines: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.splitLines),\n/* harmony export */   splitToken: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.splitToken),\n/* harmony export */   toArray: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.toArray),\n/* harmony export */   tokenizeAnsiWithTheme: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.tokenizeAnsiWithTheme),\n/* harmony export */   tokenizeWithTheme: () => (/* reexport safe */ shikiji_core__WEBPACK_IMPORTED_MODULE_3__.tokenizeWithTheme)\n/* harmony export */ });\n/* harmony import */ var shikiji_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shikiji/wasm */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/wasm-inlined.mjs\");\n/* harmony import */ var _langs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./langs.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs.mjs\");\n/* harmony import */ var _themes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./themes.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes.mjs\");\n/* harmony import */ var shikiji_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shikiji-core */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji-core@0.10.2/node_modules/shikiji-core/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\nconst getHighlighter = /* @__PURE__ */ (0,shikiji_core__WEBPACK_IMPORTED_MODULE_3__.createdBundledHighlighter)(\n  _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguages,\n  _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemes,\n  shikiji_wasm__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n);\nconst {\n  codeToHtml,\n  codeToHast,\n  codeToThemedTokens,\n  codeToTokensWithThemes,\n  getSingletonHighlighter\n} = /* @__PURE__ */ (0,shikiji_core__WEBPACK_IMPORTED_MODULE_3__.createSingletonShorthands)(\n  getHighlighter\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraWppQDAuMTAuMi9ub2RlX21vZHVsZXMvc2hpa2lqaS9kaXN0L2J1bmRsZS1mdWxsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNzQjtBQUNWO0FBQ2lEO0FBQ25EO0FBQ0k7QUFDbUM7QUFDdkQ7O0FBRTdCLHVDQUF1Qyx1RUFBeUI7QUFDaEUsRUFBRSx3REFBZ0I7QUFDbEIsRUFBRSxzREFBYTtBQUNmLEVBQUUsb0RBQU87QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsa0JBQWtCLHVFQUF5QjtBQUM3QztBQUNBOztBQUV3SiIsInNvdXJjZXMiOlsiL1VzZXJzL2FjYm94bGl1L3Byb2plY3RzL2Jpam9uL2VjaG9haS9ub2RlX21vZHVsZXMvLnBucG0vc2hpa2lqaUAwLjEwLjIvbm9kZV9tb2R1bGVzL3NoaWtpamkvZGlzdC9idW5kbGUtZnVsbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFdhc20gZnJvbSAnc2hpa2lqaS93YXNtJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2V0V2FzbUlubGluZWQgfSBmcm9tICdzaGlraWppL3dhc20nO1xuaW1wb3J0IHsgYnVuZGxlZExhbmd1YWdlcyB9IGZyb20gJy4vbGFuZ3MubWpzJztcbmV4cG9ydCB7IGJ1bmRsZWRMYW5ndWFnZXNBbGlhcywgYnVuZGxlZExhbmd1YWdlc0Jhc2UsIGJ1bmRsZWRMYW5ndWFnZXNJbmZvIH0gZnJvbSAnLi9sYW5ncy5tanMnO1xuaW1wb3J0IHsgYnVuZGxlZFRoZW1lcyB9IGZyb20gJy4vdGhlbWVzLm1qcyc7XG5leHBvcnQgeyBidW5kbGVkVGhlbWVzSW5mbyB9IGZyb20gJy4vdGhlbWVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVkQnVuZGxlZEhpZ2hsaWdodGVyLCBjcmVhdGVTaW5nbGV0b25TaG9ydGhhbmRzIH0gZnJvbSAnc2hpa2lqaS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ3NoaWtpamktY29yZSc7XG5cbmNvbnN0IGdldEhpZ2hsaWdodGVyID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZWRCdW5kbGVkSGlnaGxpZ2h0ZXIoXG4gIGJ1bmRsZWRMYW5ndWFnZXMsXG4gIGJ1bmRsZWRUaGVtZXMsXG4gIGdldFdhc21cbik7XG5jb25zdCB7XG4gIGNvZGVUb0h0bWwsXG4gIGNvZGVUb0hhc3QsXG4gIGNvZGVUb1RoZW1lZFRva2VucyxcbiAgY29kZVRvVG9rZW5zV2l0aFRoZW1lcyxcbiAgZ2V0U2luZ2xldG9uSGlnaGxpZ2h0ZXJcbn0gPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlU2luZ2xldG9uU2hvcnRoYW5kcyhcbiAgZ2V0SGlnaGxpZ2h0ZXJcbik7XG5cbmV4cG9ydCB7IGJ1bmRsZWRMYW5ndWFnZXMsIGJ1bmRsZWRUaGVtZXMsIGNvZGVUb0hhc3QsIGNvZGVUb0h0bWwsIGNvZGVUb1RoZW1lZFRva2VucywgY29kZVRvVG9rZW5zV2l0aFRoZW1lcywgZ2V0SGlnaGxpZ2h0ZXIsIGdldFNpbmdsZXRvbkhpZ2hsaWdodGVyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/bundle-full.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bundledLanguages: () => (/* binding */ bundledLanguages),\n/* harmony export */   bundledLanguagesAlias: () => (/* binding */ bundledLanguagesAlias),\n/* harmony export */   bundledLanguagesBase: () => (/* binding */ bundledLanguagesBase),\n/* harmony export */   bundledLanguagesInfo: () => (/* binding */ bundledLanguagesInfo)\n/* harmony export */ });\nconst bundledLanguagesInfo = [\n  {\n    \"id\": \"abap\",\n    \"name\": \"ABAP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_abap_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/abap.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/abap.mjs\"))\n  },\n  {\n    \"id\": \"actionscript-3\",\n    \"name\": \"ActionScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_actionscr-195766\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/actionscript-3.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/actionscript-3.mjs\"))\n  },\n  {\n    \"id\": \"ada\",\n    \"name\": \"Ada\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ada_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ada.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ada.mjs\"))\n  },\n  {\n    \"id\": \"angular-html\",\n    \"name\": \"Angular HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_angular-h-5614e8\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/angular-html.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/angular-html.mjs\")).then(function (n) { return n.e; })\n  },\n  {\n    \"id\": \"angular-ts\",\n    \"name\": \"Angular TypeScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_angular-ts_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/angular-ts.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/angular-ts.mjs\"))\n  },\n  {\n    \"id\": \"apache\",\n    \"name\": \"Apache Conf\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_apache_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/apache.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/apache.mjs\"))\n  },\n  {\n    \"id\": \"apex\",\n    \"name\": \"Apex\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_apex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/apex.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/apex.mjs\"))\n  },\n  {\n    \"id\": \"apl\",\n    \"name\": \"APL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_apl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/apl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/apl.mjs\"))\n  },\n  {\n    \"id\": \"applescript\",\n    \"name\": \"AppleScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_applescript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/applescript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/applescript.mjs\"))\n  },\n  {\n    \"id\": \"ara\",\n    \"name\": \"Ara\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ara_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ara.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ara.mjs\"))\n  },\n  {\n    \"id\": \"asm\",\n    \"name\": \"Assembly\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_asm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/asm.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/asm.mjs\"))\n  },\n  {\n    \"id\": \"astro\",\n    \"name\": \"Astro\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_astro_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/astro.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/astro.mjs\"))\n  },\n  {\n    \"id\": \"awk\",\n    \"name\": \"AWK\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_awk_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/awk.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/awk.mjs\"))\n  },\n  {\n    \"id\": \"ballerina\",\n    \"name\": \"Ballerina\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ballerina_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ballerina.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ballerina.mjs\"))\n  },\n  {\n    \"id\": \"bat\",\n    \"name\": \"Batch File\",\n    \"aliases\": [\n      \"batch\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_bat_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/bat.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/bat.mjs\"))\n  },\n  {\n    \"id\": \"beancount\",\n    \"name\": \"Beancount\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_beancount_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/beancount.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/beancount.mjs\"))\n  },\n  {\n    \"id\": \"berry\",\n    \"name\": \"Berry\",\n    \"aliases\": [\n      \"be\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_berry_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/berry.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/berry.mjs\"))\n  },\n  {\n    \"id\": \"bibtex\",\n    \"name\": \"BibTeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_bibtex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/bibtex.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/bibtex.mjs\"))\n  },\n  {\n    \"id\": \"bicep\",\n    \"name\": \"Bicep\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_bicep_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/bicep.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/bicep.mjs\"))\n  },\n  {\n    \"id\": \"blade\",\n    \"name\": \"Blade\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_blade_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/blade.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/blade.mjs\"))\n  },\n  {\n    \"id\": \"c\",\n    \"name\": \"C\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_c_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/c.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/c.mjs\"))\n  },\n  {\n    \"id\": \"cadence\",\n    \"name\": \"Cadence\",\n    \"aliases\": [\n      \"cdc\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cadence_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cadence.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cadence.mjs\"))\n  },\n  {\n    \"id\": \"clarity\",\n    \"name\": \"Clarity\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_clarity_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/clarity.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/clarity.mjs\"))\n  },\n  {\n    \"id\": \"clojure\",\n    \"name\": \"Clojure\",\n    \"aliases\": [\n      \"clj\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_clojure_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/clojure.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/clojure.mjs\"))\n  },\n  {\n    \"id\": \"cmake\",\n    \"name\": \"CMake\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cmake_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cmake.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cmake.mjs\"))\n  },\n  {\n    \"id\": \"cobol\",\n    \"name\": \"COBOL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cobol_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cobol.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cobol.mjs\"))\n  },\n  {\n    \"id\": \"codeql\",\n    \"name\": \"CodeQL\",\n    \"aliases\": [\n      \"ql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_codeql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/codeql.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/codeql.mjs\"))\n  },\n  {\n    \"id\": \"coffee\",\n    \"name\": \"CoffeeScript\",\n    \"aliases\": [\n      \"coffeescript\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_coffee_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/coffee.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/coffee.mjs\"))\n  },\n  {\n    \"id\": \"cpp\",\n    \"name\": \"C++\",\n    \"aliases\": [\n      \"c++\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cpp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cpp.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cpp.mjs\"))\n  },\n  {\n    \"id\": \"crystal\",\n    \"name\": \"Crystal\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_crystal_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/crystal.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/crystal.mjs\"))\n  },\n  {\n    \"id\": \"csharp\",\n    \"name\": \"C#\",\n    \"aliases\": [\n      \"c#\",\n      \"cs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_csharp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/csharp.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/csharp.mjs\"))\n  },\n  {\n    \"id\": \"css\",\n    \"name\": \"CSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_css_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/css.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/css.mjs\"))\n  },\n  {\n    \"id\": \"csv\",\n    \"name\": \"csv syntax\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_csv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/csv.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/csv.mjs\"))\n  },\n  {\n    \"id\": \"cue\",\n    \"name\": \"CUE\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cue_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cue.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cue.mjs\"))\n  },\n  {\n    \"id\": \"cypher\",\n    \"name\": \"Cypher\",\n    \"aliases\": [\n      \"cql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_cypher_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/cypher.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/cypher.mjs\"))\n  },\n  {\n    \"id\": \"d\",\n    \"name\": \"D\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_d_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/d.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/d.mjs\"))\n  },\n  {\n    \"id\": \"dart\",\n    \"name\": \"Dart\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_dart_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/dart.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/dart.mjs\"))\n  },\n  {\n    \"id\": \"dax\",\n    \"name\": \"DAX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_dax_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/dax.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/dax.mjs\"))\n  },\n  {\n    \"id\": \"diff\",\n    \"name\": \"Diff\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_diff_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/diff.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/diff.mjs\"))\n  },\n  {\n    \"id\": \"docker\",\n    \"name\": \"Dockerfile\",\n    \"aliases\": [\n      \"dockerfile\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_docker_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/docker.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/docker.mjs\"))\n  },\n  {\n    \"id\": \"dream-maker\",\n    \"name\": \"Dream Maker\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_dream-maker_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/dream-maker.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/dream-maker.mjs\"))\n  },\n  {\n    \"id\": \"elixir\",\n    \"name\": \"Elixir\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_elixir_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/elixir.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/elixir.mjs\"))\n  },\n  {\n    \"id\": \"elm\",\n    \"name\": \"Elm\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_elm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/elm.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/elm.mjs\"))\n  },\n  {\n    \"id\": \"erb\",\n    \"name\": \"ERB\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_erb_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/erb.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/erb.mjs\"))\n  },\n  {\n    \"id\": \"erlang\",\n    \"name\": \"Erlang\",\n    \"aliases\": [\n      \"erl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_erlang_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/erlang.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/erlang.mjs\"))\n  },\n  {\n    \"id\": \"fish\",\n    \"name\": \"Fish\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_fish_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/fish.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/fish.mjs\"))\n  },\n  {\n    \"id\": \"fsharp\",\n    \"name\": \"F#\",\n    \"aliases\": [\n      \"f#\",\n      \"fs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_fsharp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/fsharp.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/fsharp.mjs\"))\n  },\n  {\n    \"id\": \"gdresource\",\n    \"name\": \"GDResource\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_gdresource_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/gdresource.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/gdresource.mjs\"))\n  },\n  {\n    \"id\": \"gdscript\",\n    \"name\": \"GDScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_gdscript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/gdscript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/gdscript.mjs\"))\n  },\n  {\n    \"id\": \"gdshader\",\n    \"name\": \"GDShader\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_gdshader_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/gdshader.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/gdshader.mjs\"))\n  },\n  {\n    \"id\": \"gherkin\",\n    \"name\": \"Gherkin\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_gherkin_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/gherkin.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/gherkin.mjs\"))\n  },\n  {\n    \"id\": \"git-commit\",\n    \"name\": \"Git Commit Message\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_git-commit_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/git-commit.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/git-commit.mjs\"))\n  },\n  {\n    \"id\": \"git-rebase\",\n    \"name\": \"Git Rebase Message\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_git-rebase_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/git-rebase.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/git-rebase.mjs\"))\n  },\n  {\n    \"id\": \"glimmer-js\",\n    \"name\": \"Glimmer JS\",\n    \"aliases\": [\n      \"gjs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_glimmer-js_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/glimmer-js.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/glimmer-js.mjs\"))\n  },\n  {\n    \"id\": \"glimmer-ts\",\n    \"name\": \"Glimmer TS\",\n    \"aliases\": [\n      \"gts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_glimmer-ts_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/glimmer-ts.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/glimmer-ts.mjs\"))\n  },\n  {\n    \"id\": \"glsl\",\n    \"name\": \"GLSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_glsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/glsl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/glsl.mjs\"))\n  },\n  {\n    \"id\": \"gnuplot\",\n    \"name\": \"Gnuplot\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_gnuplot_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/gnuplot.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/gnuplot.mjs\"))\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Go\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_go_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/go.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/go.mjs\"))\n  },\n  {\n    \"id\": \"graphql\",\n    \"name\": \"GraphQL\",\n    \"aliases\": [\n      \"gql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_graphql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/graphql.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/graphql.mjs\"))\n  },\n  {\n    \"id\": \"groovy\",\n    \"name\": \"Groovy\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_groovy_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/groovy.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/groovy.mjs\"))\n  },\n  {\n    \"id\": \"hack\",\n    \"name\": \"Hack\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_hack_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/hack.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/hack.mjs\"))\n  },\n  {\n    \"id\": \"haml\",\n    \"name\": \"Ruby Haml\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_haml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/haml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/haml.mjs\"))\n  },\n  {\n    \"id\": \"handlebars\",\n    \"name\": \"Handlebars\",\n    \"aliases\": [\n      \"hbs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_handlebars_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/handlebars.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/handlebars.mjs\"))\n  },\n  {\n    \"id\": \"haskell\",\n    \"name\": \"Haskell\",\n    \"aliases\": [\n      \"hs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_haskell_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/haskell.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/haskell.mjs\"))\n  },\n  {\n    \"id\": \"hcl\",\n    \"name\": \"HashiCorp HCL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_hcl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/hcl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/hcl.mjs\"))\n  },\n  {\n    \"id\": \"hjson\",\n    \"name\": \"Hjson\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_hjson_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/hjson.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/hjson.mjs\"))\n  },\n  {\n    \"id\": \"hlsl\",\n    \"name\": \"HLSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_hlsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/hlsl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/hlsl.mjs\"))\n  },\n  {\n    \"id\": \"html\",\n    \"name\": \"HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_html_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/html.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/html.mjs\"))\n  },\n  {\n    \"id\": \"http\",\n    \"name\": \"HTTP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_http_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/http.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/http.mjs\"))\n  },\n  {\n    \"id\": \"imba\",\n    \"name\": \"Imba\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_imba_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/imba.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/imba.mjs\"))\n  },\n  {\n    \"id\": \"ini\",\n    \"name\": \"INI\",\n    \"aliases\": [\n      \"properties\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ini_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ini.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ini.mjs\"))\n  },\n  {\n    \"id\": \"java\",\n    \"name\": \"Java\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_java_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/java.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/java.mjs\"))\n  },\n  {\n    \"id\": \"javascript\",\n    \"name\": \"JavaScript\",\n    \"aliases\": [\n      \"js\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_javascript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/javascript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/javascript.mjs\"))\n  },\n  {\n    \"id\": \"jinja\",\n    \"name\": \"Jinja\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jinja_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jinja.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jinja.mjs\"))\n  },\n  {\n    \"id\": \"jison\",\n    \"name\": \"Jison\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jison_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jison.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jison.mjs\"))\n  },\n  {\n    \"id\": \"json\",\n    \"name\": \"JSON\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_json_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/json.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/json.mjs\"))\n  },\n  {\n    \"id\": \"json5\",\n    \"name\": \"JSON5\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_json5_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/json5.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/json5.mjs\"))\n  },\n  {\n    \"id\": \"jsonc\",\n    \"name\": \"JSON with Comments\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jsonc_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jsonc.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jsonc.mjs\"))\n  },\n  {\n    \"id\": \"jsonl\",\n    \"name\": \"JSON Lines\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jsonl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jsonl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jsonl.mjs\"))\n  },\n  {\n    \"id\": \"jsonnet\",\n    \"name\": \"Jsonnet\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jsonnet_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jsonnet.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jsonnet.mjs\"))\n  },\n  {\n    \"id\": \"jssm\",\n    \"name\": \"JSSM\",\n    \"aliases\": [\n      \"fsl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jssm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jssm.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jssm.mjs\"))\n  },\n  {\n    \"id\": \"jsx\",\n    \"name\": \"JSX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_jsx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/jsx.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/jsx.mjs\"))\n  },\n  {\n    \"id\": \"julia\",\n    \"name\": \"Julia\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_julia_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/julia.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/julia.mjs\"))\n  },\n  {\n    \"id\": \"kotlin\",\n    \"name\": \"Kotlin\",\n    \"aliases\": [\n      \"kt\",\n      \"kts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_kotlin_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/kotlin.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/kotlin.mjs\"))\n  },\n  {\n    \"id\": \"kusto\",\n    \"name\": \"Kusto\",\n    \"aliases\": [\n      \"kql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_kusto_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/kusto.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/kusto.mjs\"))\n  },\n  {\n    \"id\": \"latex\",\n    \"name\": \"LaTeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_latex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/latex.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/latex.mjs\"))\n  },\n  {\n    \"id\": \"less\",\n    \"name\": \"Less\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_less_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/less.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/less.mjs\"))\n  },\n  {\n    \"id\": \"liquid\",\n    \"name\": \"Liquid\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_liquid_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/liquid.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/liquid.mjs\"))\n  },\n  {\n    \"id\": \"lisp\",\n    \"name\": \"Lisp\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_lisp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/lisp.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/lisp.mjs\"))\n  },\n  {\n    \"id\": \"logo\",\n    \"name\": \"Logo\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_logo_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/logo.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/logo.mjs\"))\n  },\n  {\n    \"id\": \"lua\",\n    \"name\": \"Lua\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_lua_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/lua.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/lua.mjs\"))\n  },\n  {\n    \"id\": \"make\",\n    \"name\": \"Makefile\",\n    \"aliases\": [\n      \"makefile\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_make_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/make.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/make.mjs\"))\n  },\n  {\n    \"id\": \"markdown\",\n    \"name\": \"Markdown\",\n    \"aliases\": [\n      \"md\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_markdown_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/markdown.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/markdown.mjs\"))\n  },\n  {\n    \"id\": \"marko\",\n    \"name\": \"Marko\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_marko_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/marko.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/marko.mjs\"))\n  },\n  {\n    \"id\": \"matlab\",\n    \"name\": \"MATLAB\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_matlab_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/matlab.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/matlab.mjs\"))\n  },\n  {\n    \"id\": \"mdc\",\n    \"name\": \"MDC\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_mdc_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/mdc.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/mdc.mjs\"))\n  },\n  {\n    \"id\": \"mdx\",\n    \"name\": \"MDX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_mdx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/mdx.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/mdx.mjs\"))\n  },\n  {\n    \"id\": \"mermaid\",\n    \"name\": \"Mermaid\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_mermaid_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/mermaid.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/mermaid.mjs\"))\n  },\n  {\n    \"id\": \"mojo\",\n    \"name\": \"Mojo\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_mojo_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/mojo.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/mojo.mjs\"))\n  },\n  {\n    \"id\": \"narrat\",\n    \"name\": \"Narrat Language\",\n    \"aliases\": [\n      \"nar\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_narrat_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/narrat.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/narrat.mjs\"))\n  },\n  {\n    \"id\": \"nextflow\",\n    \"name\": \"Nextflow\",\n    \"aliases\": [\n      \"nf\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_nextflow_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/nextflow.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/nextflow.mjs\"))\n  },\n  {\n    \"id\": \"nginx\",\n    \"name\": \"Nginx\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_nginx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/nginx.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/nginx.mjs\"))\n  },\n  {\n    \"id\": \"nim\",\n    \"name\": \"Nim\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_nim_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/nim.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/nim.mjs\"))\n  },\n  {\n    \"id\": \"nix\",\n    \"name\": \"Nix\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_nix_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/nix.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/nix.mjs\"))\n  },\n  {\n    \"id\": \"nushell\",\n    \"name\": \"nushell\",\n    \"aliases\": [\n      \"nu\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_nushell_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/nushell.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/nushell.mjs\"))\n  },\n  {\n    \"id\": \"objective-c\",\n    \"name\": \"Objective-C\",\n    \"aliases\": [\n      \"objc\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_objective-c_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/objective-c.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/objective-c.mjs\"))\n  },\n  {\n    \"id\": \"objective-cpp\",\n    \"name\": \"Objective-C++\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_objective-3ad257\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/objective-cpp.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/objective-cpp.mjs\"))\n  },\n  {\n    \"id\": \"ocaml\",\n    \"name\": \"OCaml\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ocaml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ocaml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ocaml.mjs\"))\n  },\n  {\n    \"id\": \"pascal\",\n    \"name\": \"Pascal\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_pascal_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/pascal.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/pascal.mjs\"))\n  },\n  {\n    \"id\": \"perl\",\n    \"name\": \"Perl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_perl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/perl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/perl.mjs\"))\n  },\n  {\n    \"id\": \"php\",\n    \"name\": \"PHP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_php_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/php.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/php.mjs\"))\n  },\n  {\n    \"id\": \"plsql\",\n    \"name\": \"PL/SQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_plsql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/plsql.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/plsql.mjs\"))\n  },\n  {\n    \"id\": \"postcss\",\n    \"name\": \"PostCSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_postcss_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/postcss.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/postcss.mjs\"))\n  },\n  {\n    \"id\": \"powerquery\",\n    \"name\": \"PowerQuery\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_powerquery_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/powerquery.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/powerquery.mjs\"))\n  },\n  {\n    \"id\": \"powershell\",\n    \"name\": \"PowerShell\",\n    \"aliases\": [\n      \"ps\",\n      \"ps1\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_powershell_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/powershell.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/powershell.mjs\"))\n  },\n  {\n    \"id\": \"prisma\",\n    \"name\": \"Prisma\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_prisma_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/prisma.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/prisma.mjs\"))\n  },\n  {\n    \"id\": \"prolog\",\n    \"name\": \"Prolog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_prolog_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/prolog.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/prolog.mjs\"))\n  },\n  {\n    \"id\": \"proto\",\n    \"name\": \"Protocol Buffer 3\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_proto_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/proto.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/proto.mjs\"))\n  },\n  {\n    \"id\": \"pug\",\n    \"name\": \"Pug\",\n    \"aliases\": [\n      \"jade\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_pug_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/pug.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/pug.mjs\"))\n  },\n  {\n    \"id\": \"puppet\",\n    \"name\": \"Puppet\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_puppet_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/puppet.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/puppet.mjs\"))\n  },\n  {\n    \"id\": \"purescript\",\n    \"name\": \"PureScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_purescript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/purescript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/purescript.mjs\"))\n  },\n  {\n    \"id\": \"python\",\n    \"name\": \"Python\",\n    \"aliases\": [\n      \"py\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_python_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/python.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/python.mjs\"))\n  },\n  {\n    \"id\": \"r\",\n    \"name\": \"R\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_r_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/r.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/r.mjs\"))\n  },\n  {\n    \"id\": \"raku\",\n    \"name\": \"Raku\",\n    \"aliases\": [\n      \"perl6\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_raku_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/raku.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/raku.mjs\"))\n  },\n  {\n    \"id\": \"razor\",\n    \"name\": \"ASP.NET Razor\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_razor_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/razor.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/razor.mjs\"))\n  },\n  {\n    \"id\": \"reg\",\n    \"name\": \"Windows Registry Script\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_reg_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/reg.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/reg.mjs\"))\n  },\n  {\n    \"id\": \"rel\",\n    \"name\": \"Rel\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_rel_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/rel.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/rel.mjs\"))\n  },\n  {\n    \"id\": \"riscv\",\n    \"name\": \"RISC-V\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_riscv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/riscv.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/riscv.mjs\"))\n  },\n  {\n    \"id\": \"rst\",\n    \"name\": \"reStructuredText\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_rst_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/rst.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/rst.mjs\"))\n  },\n  {\n    \"id\": \"ruby\",\n    \"name\": \"Ruby\",\n    \"aliases\": [\n      \"rb\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ruby_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ruby.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ruby.mjs\"))\n  },\n  {\n    \"id\": \"rust\",\n    \"name\": \"Rust\",\n    \"aliases\": [\n      \"rs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_rust_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/rust.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/rust.mjs\"))\n  },\n  {\n    \"id\": \"sas\",\n    \"name\": \"SAS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_sas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/sas.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/sas.mjs\"))\n  },\n  {\n    \"id\": \"sass\",\n    \"name\": \"Sass\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_sass_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/sass.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/sass.mjs\"))\n  },\n  {\n    \"id\": \"scala\",\n    \"name\": \"Scala\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_scala_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/scala.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/scala.mjs\"))\n  },\n  {\n    \"id\": \"scheme\",\n    \"name\": \"Scheme\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_scheme_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/scheme.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/scheme.mjs\"))\n  },\n  {\n    \"id\": \"scss\",\n    \"name\": \"SCSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_scss_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/scss.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/scss.mjs\"))\n  },\n  {\n    \"id\": \"shaderlab\",\n    \"name\": \"ShaderLab\",\n    \"aliases\": [\n      \"shader\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_shaderlab_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/shaderlab.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/shaderlab.mjs\"))\n  },\n  {\n    \"id\": \"shellscript\",\n    \"name\": \"Shell\",\n    \"aliases\": [\n      \"bash\",\n      \"sh\",\n      \"shell\",\n      \"zsh\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_shellscript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/shellscript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/shellscript.mjs\"))\n  },\n  {\n    \"id\": \"shellsession\",\n    \"name\": \"Shell Session\",\n    \"aliases\": [\n      \"console\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_shellsess-719e85\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/shellsession.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/shellsession.mjs\"))\n  },\n  {\n    \"id\": \"smalltalk\",\n    \"name\": \"Smalltalk\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_smalltalk_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/smalltalk.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/smalltalk.mjs\"))\n  },\n  {\n    \"id\": \"solidity\",\n    \"name\": \"Solidity\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_solidity_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/solidity.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/solidity.mjs\"))\n  },\n  {\n    \"id\": \"sparql\",\n    \"name\": \"SPARQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_sparql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/sparql.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/sparql.mjs\"))\n  },\n  {\n    \"id\": \"splunk\",\n    \"name\": \"Splunk Query Language\",\n    \"aliases\": [\n      \"spl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_splunk_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/splunk.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/splunk.mjs\"))\n  },\n  {\n    \"id\": \"sql\",\n    \"name\": \"SQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_sql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/sql.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/sql.mjs\"))\n  },\n  {\n    \"id\": \"ssh-config\",\n    \"name\": \"SSH Config\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_ssh-config_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/ssh-config.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/ssh-config.mjs\"))\n  },\n  {\n    \"id\": \"stata\",\n    \"name\": \"Stata\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_stata_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/stata.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/stata.mjs\"))\n  },\n  {\n    \"id\": \"stylus\",\n    \"name\": \"Stylus\",\n    \"aliases\": [\n      \"styl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_stylus_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/stylus.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/stylus.mjs\"))\n  },\n  {\n    \"id\": \"svelte\",\n    \"name\": \"Svelte\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_svelte_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/svelte.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/svelte.mjs\"))\n  },\n  {\n    \"id\": \"swift\",\n    \"name\": \"Swift\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_swift_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/swift.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/swift.mjs\"))\n  },\n  {\n    \"id\": \"system-verilog\",\n    \"name\": \"SystemVerilog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_system-ve-04834a\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/system-verilog.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/system-verilog.mjs\"))\n  },\n  {\n    \"id\": \"tasl\",\n    \"name\": \"Tasl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_tasl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/tasl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/tasl.mjs\"))\n  },\n  {\n    \"id\": \"tcl\",\n    \"name\": \"Tcl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_tcl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/tcl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/tcl.mjs\"))\n  },\n  {\n    \"id\": \"tex\",\n    \"name\": \"TeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_tex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/tex.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/tex.mjs\"))\n  },\n  {\n    \"id\": \"toml\",\n    \"name\": \"TOML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_toml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/toml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/toml.mjs\"))\n  },\n  {\n    \"id\": \"tsx\",\n    \"name\": \"TSX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_tsx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/tsx.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/tsx.mjs\"))\n  },\n  {\n    \"id\": \"turtle\",\n    \"name\": \"Turtle\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_turtle_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/turtle.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/turtle.mjs\"))\n  },\n  {\n    \"id\": \"twig\",\n    \"name\": \"Twig\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_twig_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/twig.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/twig.mjs\"))\n  },\n  {\n    \"id\": \"typescript\",\n    \"name\": \"TypeScript\",\n    \"aliases\": [\n      \"ts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_typescript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/typescript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/typescript.mjs\"))\n  },\n  {\n    \"id\": \"v\",\n    \"name\": \"V\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_v_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/v.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/v.mjs\"))\n  },\n  {\n    \"id\": \"vb\",\n    \"name\": \"Visual Basic\",\n    \"aliases\": [\n      \"cmd\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_vb_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/vb.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/vb.mjs\"))\n  },\n  {\n    \"id\": \"verilog\",\n    \"name\": \"Verilog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_verilog_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/verilog.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/verilog.mjs\"))\n  },\n  {\n    \"id\": \"vhdl\",\n    \"name\": \"VHDL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_vhdl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/vhdl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/vhdl.mjs\"))\n  },\n  {\n    \"id\": \"viml\",\n    \"name\": \"Vim Script\",\n    \"aliases\": [\n      \"vim\",\n      \"vimscript\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_viml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/viml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/viml.mjs\"))\n  },\n  {\n    \"id\": \"vue\",\n    \"name\": \"Vue\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_vue_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/vue.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/vue.mjs\"))\n  },\n  {\n    \"id\": \"vue-html\",\n    \"name\": \"Vue HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_vue-html_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/vue-html.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/vue-html.mjs\"))\n  },\n  {\n    \"id\": \"vyper\",\n    \"name\": \"Vyper\",\n    \"aliases\": [\n      \"vy\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_vyper_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/vyper.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/vyper.mjs\"))\n  },\n  {\n    \"id\": \"wasm\",\n    \"name\": \"WebAssembly\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_wasm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/wasm.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/wasm.mjs\"))\n  },\n  {\n    \"id\": \"wenyan\",\n    \"name\": \"Wenyan\",\n    \"aliases\": [\n      \"\\u6587\\u8A00\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_wenyan_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/wenyan.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/wenyan.mjs\"))\n  },\n  {\n    \"id\": \"wgsl\",\n    \"name\": \"WGSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_wgsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/wgsl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/wgsl.mjs\"))\n  },\n  {\n    \"id\": \"wolfram\",\n    \"name\": \"Wolfram\",\n    \"aliases\": [\n      \"wl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_wolfram_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/wolfram.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/wolfram.mjs\"))\n  },\n  {\n    \"id\": \"xml\",\n    \"name\": \"XML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_xml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/xml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/xml.mjs\"))\n  },\n  {\n    \"id\": \"xsl\",\n    \"name\": \"XSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_xsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/xsl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/xsl.mjs\"))\n  },\n  {\n    \"id\": \"yaml\",\n    \"name\": \"YAML\",\n    \"aliases\": [\n      \"yml\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_yaml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/yaml.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/yaml.mjs\"))\n  },\n  {\n    \"id\": \"zenscript\",\n    \"name\": \"ZenScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_zenscript_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/zenscript.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/zenscript.mjs\"))\n  },\n  {\n    \"id\": \"zig\",\n    \"name\": \"zig\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_langs_zig_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./langs/zig.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs/zig.mjs\"))\n  }\n];\nconst bundledLanguagesBase = Object.fromEntries(bundledLanguagesInfo.map((i) => [i.id, i.import]));\nconst bundledLanguagesAlias = Object.fromEntries(bundledLanguagesInfo.flatMap((i) => i.aliases?.map((a) => [a, i.import]) || []));\nconst bundledLanguages = {\n  ...bundledLanguagesBase,\n  ...bundledLanguagesAlias\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/langs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bundledThemes: () => (/* binding */ bundledThemes),\n/* harmony export */   bundledThemesInfo: () => (/* binding */ bundledThemesInfo)\n/* harmony export */ });\nconst bundledThemesInfo = [\n  {\n    \"id\": \"andromeeda\",\n    \"displayName\": \"Andromeeda\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_andromeeda_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/andromeeda.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/andromeeda.mjs\"))\n  },\n  {\n    \"id\": \"aurora-x\",\n    \"displayName\": \"Aurora X\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_aurora-x_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/aurora-x.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/aurora-x.mjs\"))\n  },\n  {\n    \"id\": \"ayu-dark\",\n    \"displayName\": \"Ayu Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_ayu-dark_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/ayu-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/ayu-dark.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-frappe\",\n    \"displayName\": \"Catppuccin Frapp\\xE9\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_catppucc-497484\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/catppuccin-frappe.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/catppuccin-frappe.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-latte\",\n    \"displayName\": \"Catppuccin Latte\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_catppucc-6a4c23\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/catppuccin-latte.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/catppuccin-latte.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-macchiato\",\n    \"displayName\": \"Catppuccin Macchiato\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_catppucc-689427\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/catppuccin-macchiato.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/catppuccin-macchiato.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-mocha\",\n    \"displayName\": \"Catppuccin Mocha\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_catppucc-93bae5\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/catppuccin-mocha.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/catppuccin-mocha.mjs\"))\n  },\n  {\n    \"id\": \"dark-plus\",\n    \"displayName\": \"Dark Plus\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_dark-plus_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/dark-plus.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/dark-plus.mjs\"))\n  },\n  {\n    \"id\": \"dracula\",\n    \"displayName\": \"Dracula\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_dracula_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/dracula.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/dracula.mjs\"))\n  },\n  {\n    \"id\": \"dracula-soft\",\n    \"displayName\": \"Dracula Soft\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_dracula--4b7c7d\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/dracula-soft.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/dracula-soft.mjs\"))\n  },\n  {\n    \"id\": \"github-dark\",\n    \"displayName\": \"GitHub Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_github-d-887a28\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/github-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/github-dark.mjs\"))\n  },\n  {\n    \"id\": \"github-dark-dimmed\",\n    \"displayName\": \"GitHub Dark Dimmed\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_github-d-cfe1c6\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/github-dark-dimmed.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/github-dark-dimmed.mjs\"))\n  },\n  {\n    \"id\": \"github-light\",\n    \"displayName\": \"GitHub Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_github-l-aa891d\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/github-light.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/github-light.mjs\"))\n  },\n  {\n    \"id\": \"light-plus\",\n    \"displayName\": \"Light Plus\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_light-plus_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/light-plus.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/light-plus.mjs\"))\n  },\n  {\n    \"id\": \"material-theme\",\n    \"displayName\": \"Material Theme\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_material-1288bd\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/material-theme.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/material-theme.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-darker\",\n    \"displayName\": \"Material Theme Darker\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_material-13d8e0\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/material-theme-darker.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/material-theme-darker.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-lighter\",\n    \"displayName\": \"Material Theme Lighter\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_material-67ccd9\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/material-theme-lighter.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/material-theme-lighter.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-ocean\",\n    \"displayName\": \"Material Theme Ocean\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_material-2293fe\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/material-theme-ocean.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/material-theme-ocean.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-palenight\",\n    \"displayName\": \"Material Theme Palenight\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_material-c17ec2\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/material-theme-palenight.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/material-theme-palenight.mjs\"))\n  },\n  {\n    \"id\": \"min-dark\",\n    \"displayName\": \"Min Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_min-dark_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/min-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/min-dark.mjs\"))\n  },\n  {\n    \"id\": \"min-light\",\n    \"displayName\": \"Min Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_min-light_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/min-light.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/min-light.mjs\"))\n  },\n  {\n    \"id\": \"monokai\",\n    \"displayName\": \"Monokai\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_monokai_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/monokai.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/monokai.mjs\"))\n  },\n  {\n    \"id\": \"night-owl\",\n    \"displayName\": \"Night Owl\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_night-owl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/night-owl.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/night-owl.mjs\"))\n  },\n  {\n    \"id\": \"nord\",\n    \"displayName\": \"Nord\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_nord_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/nord.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/nord.mjs\"))\n  },\n  {\n    \"id\": \"one-dark-pro\",\n    \"displayName\": \"One Dark Pro\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_one-dark-0015e4\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/one-dark-pro.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/one-dark-pro.mjs\"))\n  },\n  {\n    \"id\": \"poimandres\",\n    \"displayName\": \"Poimandres\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_poimandres_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/poimandres.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/poimandres.mjs\"))\n  },\n  {\n    \"id\": \"red\",\n    \"displayName\": \"Red\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_red_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/red.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/red.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine\",\n    \"displayName\": \"Ros\\xE9 Pine\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_rose-pine_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/rose-pine.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/rose-pine.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine-dawn\",\n    \"displayName\": \"Ros\\xE9 Pine Dawn\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_rose-pin-92ee40\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/rose-pine-dawn.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/rose-pine-dawn.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine-moon\",\n    \"displayName\": \"Ros\\xE9 Pine Moon\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_rose-pin-19465e\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/rose-pine-moon.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/rose-pine-moon.mjs\"))\n  },\n  {\n    \"id\": \"slack-dark\",\n    \"displayName\": \"Slack Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_slack-dark_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/slack-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/slack-dark.mjs\"))\n  },\n  {\n    \"id\": \"slack-ochin\",\n    \"displayName\": \"Slack Ochin\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_slack-oc-8e5cde\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/slack-ochin.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/slack-ochin.mjs\"))\n  },\n  {\n    \"id\": \"solarized-dark\",\n    \"displayName\": \"Solarized Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_solarize-0e9a13\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/solarized-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/solarized-dark.mjs\"))\n  },\n  {\n    \"id\": \"solarized-light\",\n    \"displayName\": \"Solarized Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_solarize-da73a1\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/solarized-light.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/solarized-light.mjs\"))\n  },\n  {\n    \"id\": \"synthwave-84\",\n    \"displayName\": \"Synthwave '84\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_synthwav-e52748\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/synthwave-84.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/synthwave-84.mjs\"))\n  },\n  {\n    \"id\": \"tokyo-night\",\n    \"displayName\": \"Tokyo Night\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_tokyo-ni-a92b27\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/tokyo-night.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/tokyo-night.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-black\",\n    \"displayName\": \"Vitesse Black\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_vitesse--21a8a8\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/vitesse-black.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/vitesse-black.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-dark\",\n    \"displayName\": \"Vitesse Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_vitesse--89eda2\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/vitesse-dark.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/vitesse-dark.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-light\",\n    \"displayName\": \"Vitesse Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikiji_0_10_2_node_modules_shikiji_dist_themes_vitesse--ca8ff0\").then(__webpack_require__.bind(__webpack_require__, /*! ./themes/vitesse-light.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes/vitesse-light.mjs\"))\n  }\n];\nconst bundledThemes = Object.fromEntries(bundledThemesInfo.map((i) => [i.id, i.import]));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shikiji@0.10.2/node_modules/shikiji/dist/themes.mjs\n"));

/***/ })

});